
FreeRTOS_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005748  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005940  08005940  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005940  08005940  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005940  08005940  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005940  08005940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005944  08005944  00015944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000010e4  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010f4  200010f4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001752f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f84  00000000  00000000  0003756f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  0003a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  0003b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c52f  00000000  00000000  0003c710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014757  00000000  00000000  00058c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac51a  00000000  00000000  0006d396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001198b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004950  00000000  00000000  00119904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058c0 	.word	0x080058c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080058c0 	.word	0x080058c0

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b08a      	sub	sp, #40	; 0x28
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fad5 	bl	80007b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f833 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f90f 	bl	8000434 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000216:	f000 f8dd 	bl	80003d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800021a:	f000 f887 	bl	800032c <MX_TIM1_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800021e:	2300      	movs	r3, #0
 8000220:	623b      	str	r3, [r7, #32]
 8000222:	2300      	movs	r3, #0
 8000224:	627b      	str	r3, [r7, #36]	; 0x24
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000226:	f107 0320 	add.w	r3, r7, #32
 800022a:	2101      	movs	r1, #1
 800022c:	4618      	mov	r0, r3
 800022e:	f003 f827 	bl	8003280 <osSemaphoreCreate>
 8000232:	4603      	mov	r3, r0
 8000234:	4a0c      	ldr	r2, [pc, #48]	; (8000268 <main+0x64>)
 8000236:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  HAL_TIM_Base_Start_IT(&htim1);
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <main+0x68>)
 800023a:	f002 f867 	bl	800230c <HAL_TIM_Base_Start_IT>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <main+0x6c>)
 8000240:	1d3c      	adds	r4, r7, #4
 8000242:	461d      	mov	r5, r3
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f002 ffc7 	bl	80031e8 <osThreadCreate>
 800025a:	4603      	mov	r3, r0
 800025c:	4a05      	ldr	r2, [pc, #20]	; (8000274 <main+0x70>)
 800025e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000260:	f002 ffbb 	bl	80031da <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000264:	e7fe      	b.n	8000264 <main+0x60>
 8000266:	bf00      	nop
 8000268:	2000101c 	.word	0x2000101c
 800026c:	20000fd0 	.word	0x20000fd0
 8000270:	080058e4 	.word	0x080058e4
 8000274:	20000fcc 	.word	0x20000fcc

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b096      	sub	sp, #88	; 0x58
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f005 fb12 	bl	80058b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 031c 	add.w	r3, r7, #28
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ac:	2302      	movs	r3, #2
 80002ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b4:	2310      	movs	r3, #16
 80002b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	2302      	movs	r3, #2
 80002ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002bc:	2300      	movs	r3, #0
 80002be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002c0:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80002c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fd30 	bl	8000d30 <HAL_RCC_OscConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002d6:	f000 f929 	bl	800052c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	230f      	movs	r3, #15
 80002dc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002de:	2302      	movs	r3, #2
 80002e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f0:	f107 031c 	add.w	r3, r7, #28
 80002f4:	2101      	movs	r1, #1
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fc22 	bl	8001b40 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000302:	f000 f913 	bl	800052c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800030a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800030c:	2300      	movs	r3, #0
 800030e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fe7c 	bl	8002010 <HAL_RCCEx_PeriphCLKConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800031e:	f000 f905 	bl	800052c <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3758      	adds	r7, #88	; 0x58
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_TIM1_Init+0xa0>)
 800034c:	4a20      	ldr	r2, [pc, #128]	; (80003d0 <MX_TIM1_Init+0xa4>)
 800034e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3000-1;
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_TIM1_Init+0xa0>)
 8000352:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000356:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000358:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <MX_TIM1_Init+0xa0>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000-1;
 800035e:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_TIM1_Init+0xa0>)
 8000360:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000364:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000366:	4b19      	ldr	r3, [pc, #100]	; (80003cc <MX_TIM1_Init+0xa0>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800036c:	4b17      	ldr	r3, [pc, #92]	; (80003cc <MX_TIM1_Init+0xa0>)
 800036e:	2200      	movs	r2, #0
 8000370:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000372:	4b16      	ldr	r3, [pc, #88]	; (80003cc <MX_TIM1_Init+0xa0>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000378:	4814      	ldr	r0, [pc, #80]	; (80003cc <MX_TIM1_Init+0xa0>)
 800037a:	f001 ff6f 	bl	800225c <HAL_TIM_Base_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000384:	f000 f8d2 	bl	800052c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800038c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	4619      	mov	r1, r3
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <MX_TIM1_Init+0xa0>)
 8000396:	f002 f934 	bl	8002602 <HAL_TIM_ConfigClockSource>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80003a0:	f000 f8c4 	bl	800052c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a4:	2300      	movs	r3, #0
 80003a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4619      	mov	r1, r3
 80003b4:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_TIM1_Init+0xa0>)
 80003b6:	f002 fb27 	bl	8002a08 <HAL_TIMEx_MasterConfigSynchronization>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80003c0:	f000 f8b4 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000fd0 	.word	0x20000fd0
 80003d0:	40012c00 	.word	0x40012c00

080003d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003da:	4a15      	ldr	r2, [pc, #84]	; (8000430 <MX_USART2_UART_Init+0x5c>)
 80003dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003e0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_USART2_UART_Init+0x58>)
 80003fa:	220c      	movs	r2, #12
 80003fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_USART2_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000412:	2200      	movs	r2, #0
 8000414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_USART2_UART_Init+0x58>)
 8000418:	f002 fb82 	bl	8002b20 <HAL_UART_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000422:	f000 f883 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20001020 	.word	0x20001020
 8000430:	40004400 	.word	0x40004400

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044a:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_GPIO_Init+0x8c>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a1c      	ldr	r2, [pc, #112]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_GPIO_Init+0x8c>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	2108      	movs	r1, #8
 8000496:	480b      	ldr	r0, [pc, #44]	; (80004c4 <MX_GPIO_Init+0x90>)
 8000498:	f000 fc18 	bl	8000ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800049c:	2308      	movs	r3, #8
 800049e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 030c 	add.w	r3, r7, #12
 80004b0:	4619      	mov	r1, r3
 80004b2:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_GPIO_Init+0x90>)
 80004b4:	f000 fa98 	bl	80009e8 <HAL_GPIO_Init>

}
 80004b8:	bf00      	nop
 80004ba:	3720      	adds	r7, #32
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40021000 	.word	0x40021000
 80004c4:	48000400 	.word	0x48000400

080004c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <StartDefaultTask+0x20>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004d8:	4618      	mov	r0, r3
 80004da:	f002 ff03 	bl	80032e4 <osSemaphoreWait>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80004de:	2108      	movs	r1, #8
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <StartDefaultTask+0x24>)
 80004e2:	f000 fc0b 	bl	8000cfc <HAL_GPIO_TogglePin>
	  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 80004e6:	e7f3      	b.n	80004d0 <StartDefaultTask+0x8>
 80004e8:	2000101c 	.word	0x2000101c
 80004ec:	48000400 	.word	0x48000400

080004f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000502:	f000 f96f 	bl	80007e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim == &htim1)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d104      	bne.n	8000518 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
      osSemaphoreRelease(myBinarySem01Handle);
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4618      	mov	r0, r3
 8000514:	f002 ff34 	bl	8003380 <osSemaphoreRelease>
    }
  /* USER CODE END Callback 1 */
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40001000 	.word	0x40001000
 8000524:	20000fd0 	.word	0x20000fd0
 8000528:	2000101c 	.word	0x2000101c

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <HAL_MspInit+0x4c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a10      	ldr	r2, [pc, #64]	; (8000584 <HAL_MspInit+0x4c>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_MspInit+0x4c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <HAL_MspInit+0x4c>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <HAL_MspInit+0x4c>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_MspInit+0x4c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	210f      	movs	r1, #15
 8000572:	f06f 0001 	mvn.w	r0, #1
 8000576:	f000 fa0d 	bl	8000994 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000

08000588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_TIM_Base_MspInit+0x38>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d10b      	bne.n	80005b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_TIM_Base_MspInit+0x3c>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <HAL_TIM_Base_MspInit+0x3c>)
 80005a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <HAL_TIM_Base_MspInit+0x3c>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40012c00 	.word	0x40012c00
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a18      	ldr	r2, [pc, #96]	; (8000648 <HAL_UART_MspInit+0x80>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d129      	bne.n	800063e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <HAL_UART_MspInit+0x84>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <HAL_UART_MspInit+0x84>)
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_UART_MspInit+0x84>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_UART_MspInit+0x84>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a11      	ldr	r2, [pc, #68]	; (800064c <HAL_UART_MspInit+0x84>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_UART_MspInit+0x84>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800061a:	f248 0304 	movw	r3, #32772	; 0x8004
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800062c:	2307      	movs	r3, #7
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f000 f9d5 	bl	80009e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	; 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40004400 	.word	0x40004400
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	; 0x30
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority ,0);
 8000660:	2200      	movs	r2, #0
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	2036      	movs	r0, #54	; 0x36
 8000666:	f000 f995 	bl	8000994 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800066a:	2036      	movs	r0, #54	; 0x36
 800066c:	f000 f9ae 	bl	80009cc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <HAL_InitTick+0xa0>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <HAL_InitTick+0xa0>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	61d3      	str	r3, [r2, #28]
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <HAL_InitTick+0xa0>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000688:	f107 0210 	add.w	r2, r7, #16
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fc8a 	bl	8001fac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000698:	f001 fc44 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 800069c:	4603      	mov	r3, r0
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a4:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <HAL_InitTick+0xa4>)
 80006a6:	fba2 2303 	umull	r2, r3, r2, r3
 80006aa:	0c9b      	lsrs	r3, r3, #18
 80006ac:	3b01      	subs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <HAL_InitTick+0xa8>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <HAL_InitTick+0xac>)
 80006b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_InitTick+0xa8>)
 80006b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_InitTick+0xa8>)
 80006c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_InitTick+0xa8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <HAL_InitTick+0xa8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <HAL_InitTick+0xa8>)
 80006d2:	f001 fdc3 	bl	800225c <HAL_TIM_Base_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d104      	bne.n	80006e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <HAL_InitTick+0xa8>)
 80006de:	f001 fe15 	bl	800230c <HAL_TIM_Base_Start_IT>
 80006e2:	4603      	mov	r3, r0
 80006e4:	e000      	b.n	80006e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3730      	adds	r7, #48	; 0x30
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	431bde83 	.word	0x431bde83
 80006f8:	200010a4 	.word	0x200010a4
 80006fc:	40001000 	.word	0x40001000

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <MemManage_Handler+0x4>

08000712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler+0x4>

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <TIM6_DAC1_IRQHandler+0x10>)
 8000732:	f001 fe47 	bl	80023c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200010a4 	.word	0x200010a4

08000740 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <SystemInit+0x20>)
 8000746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800074a:	4a05      	ldr	r2, [pc, #20]	; (8000760 <SystemInit+0x20>)
 800074c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800079c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800076a:	490e      	ldr	r1, [pc, #56]	; (80007a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800076c:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <LoopForever+0xe>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000780:	4c0b      	ldr	r4, [pc, #44]	; (80007b0 <LoopForever+0x16>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800078e:	f7ff ffd7 	bl	8000740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000792:	f005 f85b 	bl	800584c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000796:	f7ff fd35 	bl	8000204 <main>

0800079a <LoopForever>:

LoopForever:
    b LoopForever
 800079a:	e7fe      	b.n	800079a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800079c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007a8:	08005948 	.word	0x08005948
  ldr r2, =_sbss
 80007ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007b0:	200010f4 	.word	0x200010f4

080007b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007b4:	e7fe      	b.n	80007b4 <ADC1_2_IRQHandler>
	...

080007b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_Init+0x28>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <HAL_Init+0x28>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f8d8 	bl	800097e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ce:	200f      	movs	r0, #15
 80007d0:	f7ff ff3e 	bl	8000650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d4:	f7ff feb0 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40022000 	.word	0x40022000

080007e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x24>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_IncTick+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008
 8000808:	200010f0 	.word	0x200010f0

0800080c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200010f0 	.word	0x200010f0

08000824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	; (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	db0b      	blt.n	80008b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 021f 	and.w	r2, r3, #31
 80008a0:	4907      	ldr	r1, [pc, #28]	; (80008c0 <__NVIC_EnableIRQ+0x38>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	2001      	movs	r0, #1
 80008aa:	fa00 f202 	lsl.w	r2, r0, r2
 80008ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	.word	0xe000e100

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	; (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ff4c 	bl	8000824 <__NVIC_SetPriorityGrouping>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a6:	f7ff ff61 	bl	800086c <__NVIC_GetPriorityGrouping>
 80009aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	6978      	ldr	r0, [r7, #20]
 80009b2:	f7ff ffb1 	bl	8000918 <NVIC_EncodePriority>
 80009b6:	4602      	mov	r2, r0
 80009b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff80 	bl	80008c4 <__NVIC_SetPriority>
}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff54 	bl	8000888 <__NVIC_EnableIRQ>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f6:	e14e      	b.n	8000c96 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	2101      	movs	r1, #1
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	fa01 f303 	lsl.w	r3, r1, r3
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f000 8140 	beq.w	8000c90 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d005      	beq.n	8000a28 <HAL_GPIO_Init+0x40>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d130      	bne.n	8000a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	2203      	movs	r2, #3
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68da      	ldr	r2, [r3, #12]
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a5e:	2201      	movs	r2, #1
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	091b      	lsrs	r3, r3, #4
 8000a74:	f003 0201 	and.w	r2, r3, #1
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d017      	beq.n	8000ac6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d123      	bne.n	8000b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	08da      	lsrs	r2, r3, #3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3208      	adds	r2, #8
 8000ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	220f      	movs	r2, #15
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	691a      	ldr	r2, [r3, #16]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	f003 0307 	and.w	r3, r3, #7
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	08da      	lsrs	r2, r3, #3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3208      	adds	r2, #8
 8000b14:	6939      	ldr	r1, [r7, #16]
 8000b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	2203      	movs	r2, #3
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0203 	and.w	r2, r3, #3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 809a 	beq.w	8000c90 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5c:	4b55      	ldr	r3, [pc, #340]	; (8000cb4 <HAL_GPIO_Init+0x2cc>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a54      	ldr	r2, [pc, #336]	; (8000cb4 <HAL_GPIO_Init+0x2cc>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b52      	ldr	r3, [pc, #328]	; (8000cb4 <HAL_GPIO_Init+0x2cc>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b74:	4a50      	ldr	r2, [pc, #320]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	089b      	lsrs	r3, r3, #2
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b9e:	d013      	beq.n	8000bc8 <HAL_GPIO_Init+0x1e0>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a46      	ldr	r2, [pc, #280]	; (8000cbc <HAL_GPIO_Init+0x2d4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d00d      	beq.n	8000bc4 <HAL_GPIO_Init+0x1dc>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a45      	ldr	r2, [pc, #276]	; (8000cc0 <HAL_GPIO_Init+0x2d8>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d007      	beq.n	8000bc0 <HAL_GPIO_Init+0x1d8>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a44      	ldr	r2, [pc, #272]	; (8000cc4 <HAL_GPIO_Init+0x2dc>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d101      	bne.n	8000bbc <HAL_GPIO_Init+0x1d4>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e006      	b.n	8000bca <HAL_GPIO_Init+0x1e2>
 8000bbc:	2305      	movs	r3, #5
 8000bbe:	e004      	b.n	8000bca <HAL_GPIO_Init+0x1e2>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e002      	b.n	8000bca <HAL_GPIO_Init+0x1e2>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <HAL_GPIO_Init+0x1e2>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	f002 0203 	and.w	r2, r2, #3
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	4093      	lsls	r3, r2
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bda:	4937      	ldr	r1, [pc, #220]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3302      	adds	r3, #2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000be8:	4b37      	ldr	r3, [pc, #220]	; (8000cc8 <HAL_GPIO_Init+0x2e0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c0c:	4a2e      	ldr	r2, [pc, #184]	; (8000cc8 <HAL_GPIO_Init+0x2e0>)
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c12:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <HAL_GPIO_Init+0x2e0>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c36:	4a24      	ldr	r2, [pc, #144]	; (8000cc8 <HAL_GPIO_Init+0x2e0>)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <HAL_GPIO_Init+0x2e0>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_GPIO_Init+0x2e0>)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_GPIO_Init+0x2e0>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_GPIO_Init+0x2e0>)
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f47f aea9 	bne.w	80009f8 <HAL_GPIO_Init+0x10>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	371c      	adds	r7, #28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010000 	.word	0x40010000
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	48000c00 	.word	0x48000c00
 8000cc8:	40010400 	.word	0x40010400

08000ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cdc:	787b      	ldrb	r3, [r7, #1]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce8:	e002      	b.n	8000cf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d0e:	887a      	ldrh	r2, [r7, #2]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4013      	ands	r3, r2
 8000d14:	041a      	lsls	r2, r3, #16
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43d9      	mvns	r1, r3
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	400b      	ands	r3, r1
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	619a      	str	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f000 bef4 	b.w	8001b32 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 816a 	beq.w	800102e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d5a:	4bb3      	ldr	r3, [pc, #716]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d00c      	beq.n	8000d80 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d66:	4bb0      	ldr	r3, [pc, #704]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d159      	bne.n	8000e26 <HAL_RCC_OscConfig+0xf6>
 8000d72:	4bad      	ldr	r3, [pc, #692]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7e:	d152      	bne.n	8000e26 <HAL_RCC_OscConfig+0xf6>
 8000d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d84:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d88:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d8c:	fa93 f3a3 	rbit	r3, r3
 8000d90:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d94:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d98:	fab3 f383 	clz	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d102      	bne.n	8000db2 <HAL_RCC_OscConfig+0x82>
 8000dac:	4b9e      	ldr	r3, [pc, #632]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	e015      	b.n	8000dde <HAL_RCC_OscConfig+0xae>
 8000db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000dda:	4b93      	ldr	r3, [pc, #588]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000de2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000de6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dea:	fa92 f2a2 	rbit	r2, r2
 8000dee:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000df2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000df6:	fab2 f282 	clz	r2, r2
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	f042 0220 	orr.w	r2, r2, #32
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	f002 021f 	and.w	r2, r2, #31
 8000e06:	2101      	movs	r1, #1
 8000e08:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 810c 	beq.w	800102c <HAL_RCC_OscConfig+0x2fc>
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f040 8106 	bne.w	800102c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	f000 be86 	b.w	8001b32 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e30:	d106      	bne.n	8000e40 <HAL_RCC_OscConfig+0x110>
 8000e32:	4b7d      	ldr	r3, [pc, #500]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a7c      	ldr	r2, [pc, #496]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e030      	b.n	8000ea2 <HAL_RCC_OscConfig+0x172>
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x134>
 8000e4a:	4b77      	ldr	r3, [pc, #476]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a76      	ldr	r2, [pc, #472]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4b74      	ldr	r3, [pc, #464]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a73      	ldr	r2, [pc, #460]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e01e      	b.n	8000ea2 <HAL_RCC_OscConfig+0x172>
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e6e:	d10c      	bne.n	8000e8a <HAL_RCC_OscConfig+0x15a>
 8000e70:	4b6d      	ldr	r3, [pc, #436]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a6c      	ldr	r2, [pc, #432]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b6a      	ldr	r3, [pc, #424]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a69      	ldr	r2, [pc, #420]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e00b      	b.n	8000ea2 <HAL_RCC_OscConfig+0x172>
 8000e8a:	4b67      	ldr	r3, [pc, #412]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a66      	ldr	r2, [pc, #408]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b64      	ldr	r3, [pc, #400]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a63      	ldr	r2, [pc, #396]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ea2:	4b61      	ldr	r3, [pc, #388]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	f023 020f 	bic.w	r2, r3, #15
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	495d      	ldr	r1, [pc, #372]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d059      	beq.n	8000f74 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fca4 	bl	800080c <HAL_GetTick>
 8000ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec8:	e00a      	b.n	8000ee0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eca:	f7ff fc9f 	bl	800080c <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b64      	cmp	r3, #100	; 0x64
 8000ed8:	d902      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	f000 be29 	b.w	8001b32 <HAL_RCC_OscConfig+0xe02>
 8000ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000ef4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef8:	fab3 f383 	clz	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d102      	bne.n	8000f12 <HAL_RCC_OscConfig+0x1e2>
 8000f0c:	4b46      	ldr	r3, [pc, #280]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	e015      	b.n	8000f3e <HAL_RCC_OscConfig+0x20e>
 8000f12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f16:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f1e:	fa93 f3a3 	rbit	r3, r3
 8000f22:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f2e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f42:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f46:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f4a:	fa92 f2a2 	rbit	r2, r2
 8000f4e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f52:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f56:	fab2 f282 	clz	r2, r2
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	f042 0220 	orr.w	r2, r2, #32
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	f002 021f 	and.w	r2, r2, #31
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0ab      	beq.n	8000eca <HAL_RCC_OscConfig+0x19a>
 8000f72:	e05c      	b.n	800102e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fc4a 	bl	800080c <HAL_GetTick>
 8000f78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7c:	e00a      	b.n	8000f94 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7e:	f7ff fc45 	bl	800080c <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b64      	cmp	r3, #100	; 0x64
 8000f8c:	d902      	bls.n	8000f94 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	f000 bdcf 	b.w	8001b32 <HAL_RCC_OscConfig+0xe02>
 8000f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f98:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fa0:	fa93 f3a3 	rbit	r3, r3
 8000fa4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fa8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fac:	fab3 f383 	clz	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d102      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x296>
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	e015      	b.n	8000ff2 <HAL_RCC_OscConfig+0x2c2>
 8000fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fde:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fe2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fe6:	fa93 f3a3 	rbit	r3, r3
 8000fea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_RCC_OscConfig+0x2f8>)
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ff6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000ffa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ffe:	fa92 f2a2 	rbit	r2, r2
 8001002:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001006:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800100a:	fab2 f282 	clz	r2, r2
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	f042 0220 	orr.w	r2, r2, #32
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	f002 021f 	and.w	r2, r2, #31
 800101a:	2101      	movs	r1, #1
 800101c:	fa01 f202 	lsl.w	r2, r1, r2
 8001020:	4013      	ands	r3, r2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1ab      	bne.n	8000f7e <HAL_RCC_OscConfig+0x24e>
 8001026:	e002      	b.n	800102e <HAL_RCC_OscConfig+0x2fe>
 8001028:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 816f 	beq.w	800131c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800103e:	4bd0      	ldr	r3, [pc, #832]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800104a:	4bcd      	ldr	r3, [pc, #820]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b08      	cmp	r3, #8
 8001054:	d16c      	bne.n	8001130 <HAL_RCC_OscConfig+0x400>
 8001056:	4bca      	ldr	r3, [pc, #808]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d166      	bne.n	8001130 <HAL_RCC_OscConfig+0x400>
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001068:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800106c:	fa93 f3a3 	rbit	r3, r3
 8001070:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001074:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001078:	fab3 f383 	clz	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	b2db      	uxtb	r3, r3
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b01      	cmp	r3, #1
 800108a:	d102      	bne.n	8001092 <HAL_RCC_OscConfig+0x362>
 800108c:	4bbc      	ldr	r3, [pc, #752]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	e013      	b.n	80010ba <HAL_RCC_OscConfig+0x38a>
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001098:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010b6:	4bb2      	ldr	r3, [pc, #712]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	2202      	movs	r2, #2
 80010bc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010c4:	fa92 f2a2 	rbit	r2, r2
 80010c8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010cc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010d0:	fab2 f282 	clz	r2, r2
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	f042 0220 	orr.w	r2, r2, #32
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	f002 021f 	and.w	r2, r2, #31
 80010e0:	2101      	movs	r1, #1
 80010e2:	fa01 f202 	lsl.w	r2, r1, r2
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d007      	beq.n	80010fc <HAL_RCC_OscConfig+0x3cc>
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d002      	beq.n	80010fc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f000 bd1b 	b.w	8001b32 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4ba0      	ldr	r3, [pc, #640]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	21f8      	movs	r1, #248	; 0xf8
 800110c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001114:	fa91 f1a1 	rbit	r1, r1
 8001118:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800111c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001120:	fab1 f181 	clz	r1, r1
 8001124:	b2c9      	uxtb	r1, r1
 8001126:	408b      	lsls	r3, r1
 8001128:	4995      	ldr	r1, [pc, #596]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112e:	e0f5      	b.n	800131c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8085 	beq.w	8001246 <HAL_RCC_OscConfig+0x516>
 800113c:	2301      	movs	r3, #1
 800113e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001142:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800114e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800115c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	461a      	mov	r2, r3
 8001164:	2301      	movs	r3, #1
 8001166:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fb50 	bl	800080c <HAL_GetTick>
 800116c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001170:	e00a      	b.n	8001188 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001172:	f7ff fb4b 	bl	800080c <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d902      	bls.n	8001188 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	f000 bcd5 	b.w	8001b32 <HAL_RCC_OscConfig+0xe02>
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800119a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119e:	fab3 f383 	clz	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	095b      	lsrs	r3, r3, #5
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d102      	bne.n	80011b8 <HAL_RCC_OscConfig+0x488>
 80011b2:	4b73      	ldr	r3, [pc, #460]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	e013      	b.n	80011e0 <HAL_RCC_OscConfig+0x4b0>
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011dc:	4b68      	ldr	r3, [pc, #416]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	2202      	movs	r2, #2
 80011e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011ea:	fa92 f2a2 	rbit	r2, r2
 80011ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011f6:	fab2 f282 	clz	r2, r2
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	f042 0220 	orr.w	r2, r2, #32
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	f002 021f 	and.w	r2, r2, #31
 8001206:	2101      	movs	r1, #1
 8001208:	fa01 f202 	lsl.w	r2, r1, r2
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0af      	beq.n	8001172 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b5b      	ldr	r3, [pc, #364]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	21f8      	movs	r1, #248	; 0xf8
 8001222:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800122a:	fa91 f1a1 	rbit	r1, r1
 800122e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001232:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001236:	fab1 f181 	clz	r1, r1
 800123a:	b2c9      	uxtb	r1, r1
 800123c:	408b      	lsls	r3, r1
 800123e:	4950      	ldr	r1, [pc, #320]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
 8001244:	e06a      	b.n	800131c <HAL_RCC_OscConfig+0x5ec>
 8001246:	2301      	movs	r3, #1
 8001248:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001258:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125c:	fab3 f383 	clz	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001266:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	461a      	mov	r2, r3
 800126e:	2300      	movs	r3, #0
 8001270:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff facb 	bl	800080c <HAL_GetTick>
 8001276:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	e00a      	b.n	8001292 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127c:	f7ff fac6 	bl	800080c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d902      	bls.n	8001292 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	f000 bc50 	b.w	8001b32 <HAL_RCC_OscConfig+0xe02>
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001298:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800129c:	fa93 f3a3 	rbit	r3, r3
 80012a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a8:	fab3 f383 	clz	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d102      	bne.n	80012c2 <HAL_RCC_OscConfig+0x592>
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	e013      	b.n	80012ea <HAL_RCC_OscConfig+0x5ba>
 80012c2:	2302      	movs	r3, #2
 80012c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012d4:	2302      	movs	r3, #2
 80012d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_RCC_OscConfig+0x650>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	2202      	movs	r2, #2
 80012ec:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012f0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012f4:	fa92 f2a2 	rbit	r2, r2
 80012f8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012fc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001300:	fab2 f282 	clz	r2, r2
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f042 0220 	orr.w	r2, r2, #32
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f002 021f 	and.w	r2, r2, #31
 8001310:	2101      	movs	r1, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1af      	bne.n	800127c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80da 	beq.w	80014e0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d069      	beq.n	800140a <HAL_RCC_OscConfig+0x6da>
 8001336:	2301      	movs	r3, #1
 8001338:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134c:	fab3 f383 	clz	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_OscConfig+0x654>)
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	461a      	mov	r2, r3
 800135c:	2301      	movs	r3, #1
 800135e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001360:	f7ff fa54 	bl	800080c <HAL_GetTick>
 8001364:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001368:	e00e      	b.n	8001388 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136a:	f7ff fa4f 	bl	800080c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d906      	bls.n	8001388 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e3d9      	b.n	8001b32 <HAL_RCC_OscConfig+0xe02>
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	10908120 	.word	0x10908120
 8001388:	2302      	movs	r3, #2
 800138a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800139a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800139e:	2202      	movs	r2, #2
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	fa93 f2a3 	rbit	r2, r3
 80013ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013b6:	2202      	movs	r2, #2
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	fa93 f2a3 	rbit	r2, r3
 80013c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	4ba5      	ldr	r3, [pc, #660]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 80013cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013d2:	2102      	movs	r1, #2
 80013d4:	6019      	str	r1, [r3, #0]
 80013d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	fa93 f1a3 	rbit	r1, r3
 80013e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013e4:	6019      	str	r1, [r3, #0]
  return result;
 80013e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	fab3 f383 	clz	r3, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0b0      	beq.n	800136a <HAL_RCC_OscConfig+0x63a>
 8001408:	e06a      	b.n	80014e0 <HAL_RCC_OscConfig+0x7b0>
 800140a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	fa93 f2a3 	rbit	r2, r3
 800141c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001420:	601a      	str	r2, [r3, #0]
  return result;
 8001422:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001426:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	4b8c      	ldr	r3, [pc, #560]	; (8001664 <HAL_RCC_OscConfig+0x934>)
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	461a      	mov	r2, r3
 8001438:	2300      	movs	r3, #0
 800143a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff f9e6 	bl	800080c <HAL_GetTick>
 8001440:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	e009      	b.n	800145a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff f9e1 	bl	800080c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e36b      	b.n	8001b32 <HAL_RCC_OscConfig+0xe02>
 800145a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800145e:	2202      	movs	r2, #2
 8001460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fa93 f2a3 	rbit	r2, r3
 800146c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001476:	2202      	movs	r2, #2
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	fa93 f2a3 	rbit	r2, r3
 8001484:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800148e:	2202      	movs	r2, #2
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	fa93 f2a3 	rbit	r2, r3
 800149c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a2:	4b6f      	ldr	r3, [pc, #444]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 80014a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014aa:	2102      	movs	r1, #2
 80014ac:	6019      	str	r1, [r3, #0]
 80014ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	fa93 f1a3 	rbit	r1, r3
 80014b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014bc:	6019      	str	r1, [r3, #0]
  return result;
 80014be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	fab3 f383 	clz	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	2101      	movs	r1, #1
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1b2      	bne.n	8001446 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8158 	beq.w	80017a0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b5a      	ldr	r3, [pc, #360]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d112      	bne.n	8001528 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b57      	ldr	r3, [pc, #348]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a56      	ldr	r2, [pc, #344]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b54      	ldr	r3, [pc, #336]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001522:	2301      	movs	r3, #1
 8001524:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <HAL_RCC_OscConfig+0x938>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d11a      	bne.n	800156a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001534:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <HAL_RCC_OscConfig+0x938>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a4b      	ldr	r2, [pc, #300]	; (8001668 <HAL_RCC_OscConfig+0x938>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001540:	f7ff f964 	bl	800080c <HAL_GetTick>
 8001544:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e009      	b.n	800155e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff f95f 	bl	800080c <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e2e9      	b.n	8001b32 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b42      	ldr	r3, [pc, #264]	; (8001668 <HAL_RCC_OscConfig+0x938>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0ef      	beq.n	800154a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x852>
 8001574:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4a39      	ldr	r2, [pc, #228]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6213      	str	r3, [r2, #32]
 8001580:	e02f      	b.n	80015e2 <HAL_RCC_OscConfig+0x8b2>
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x876>
 800158c:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a33      	ldr	r2, [pc, #204]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a30      	ldr	r2, [pc, #192]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 800159e:	f023 0304 	bic.w	r3, r3, #4
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	e01d      	b.n	80015e2 <HAL_RCC_OscConfig+0x8b2>
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x89a>
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a27      	ldr	r2, [pc, #156]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x8b2>
 80015ca:	4b25      	ldr	r3, [pc, #148]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a24      	ldr	r2, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a21      	ldr	r2, [pc, #132]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d06b      	beq.n	80016c4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ec:	f7ff f90e 	bl	800080c <HAL_GetTick>
 80015f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	e00b      	b.n	800160e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f7ff f909 	bl	800080c <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e291      	b.n	8001b32 <HAL_RCC_OscConfig+0xe02>
 800160e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001612:	2202      	movs	r2, #2
 8001614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	fa93 f2a3 	rbit	r2, r3
 8001620:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800162a:	2202      	movs	r2, #2
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	fa93 f2a3 	rbit	r2, r3
 8001638:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800163c:	601a      	str	r2, [r3, #0]
  return result;
 800163e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001642:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d109      	bne.n	800166c <HAL_RCC_OscConfig+0x93c>
 8001658:	4b01      	ldr	r3, [pc, #4]	; (8001660 <HAL_RCC_OscConfig+0x930>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	e014      	b.n	8001688 <HAL_RCC_OscConfig+0x958>
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	10908120 	.word	0x10908120
 8001668:	40007000 	.word	0x40007000
 800166c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	fa93 f2a3 	rbit	r2, r3
 800167e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	4bbb      	ldr	r3, [pc, #748]	; (8001974 <HAL_RCC_OscConfig+0xc44>)
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800168c:	2102      	movs	r1, #2
 800168e:	6011      	str	r1, [r2, #0]
 8001690:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	fa92 f1a2 	rbit	r1, r2
 800169a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800169e:	6011      	str	r1, [r2, #0]
  return result;
 80016a0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	fab2 f282 	clz	r2, r2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	f002 021f 	and.w	r2, r2, #31
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d099      	beq.n	80015f6 <HAL_RCC_OscConfig+0x8c6>
 80016c2:	e063      	b.n	800178c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff f8a2 	bl	800080c <HAL_GetTick>
 80016c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	e00b      	b.n	80016e6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff f89d 	bl	800080c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e225      	b.n	8001b32 <HAL_RCC_OscConfig+0xe02>
 80016e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016ea:	2202      	movs	r2, #2
 80016ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fa93 f2a3 	rbit	r2, r3
 80016f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001702:	2202      	movs	r2, #2
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fa93 f2a3 	rbit	r2, r3
 8001710:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001714:	601a      	str	r2, [r3, #0]
  return result;
 8001716:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800171a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	fab3 f383 	clz	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	b2db      	uxtb	r3, r3
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d102      	bne.n	8001736 <HAL_RCC_OscConfig+0xa06>
 8001730:	4b90      	ldr	r3, [pc, #576]	; (8001974 <HAL_RCC_OscConfig+0xc44>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	e00d      	b.n	8001752 <HAL_RCC_OscConfig+0xa22>
 8001736:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800173a:	2202      	movs	r2, #2
 800173c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	fa93 f2a3 	rbit	r2, r3
 8001748:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	4b89      	ldr	r3, [pc, #548]	; (8001974 <HAL_RCC_OscConfig+0xc44>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001756:	2102      	movs	r1, #2
 8001758:	6011      	str	r1, [r2, #0]
 800175a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	fa92 f1a2 	rbit	r1, r2
 8001764:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001768:	6011      	str	r1, [r2, #0]
  return result;
 800176a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	fab2 f282 	clz	r2, r2
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f002 021f 	and.w	r2, r2, #31
 8001780:	2101      	movs	r1, #1
 8001782:	fa01 f202 	lsl.w	r2, r1, r2
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1a0      	bne.n	80016ce <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800178c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b77      	ldr	r3, [pc, #476]	; (8001974 <HAL_RCC_OscConfig+0xc44>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	4a76      	ldr	r2, [pc, #472]	; (8001974 <HAL_RCC_OscConfig+0xc44>)
 800179a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 81c2 	beq.w	8001b30 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ac:	4b71      	ldr	r3, [pc, #452]	; (8001974 <HAL_RCC_OscConfig+0xc44>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	f000 819c 	beq.w	8001af2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	f040 8114 	bne.w	80019ee <HAL_RCC_OscConfig+0xcbe>
 80017c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	fa93 f2a3 	rbit	r2, r3
 80017da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017de:	601a      	str	r2, [r3, #0]
  return result;
 80017e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	461a      	mov	r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff f806 	bl	800080c <HAL_GetTick>
 8001800:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	e009      	b.n	800181a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff f801 	bl	800080c <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e18b      	b.n	8001b32 <HAL_RCC_OscConfig+0xe02>
 800181a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800181e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fa93 f2a3 	rbit	r2, r3
 800182e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001832:	601a      	str	r2, [r3, #0]
  return result;
 8001834:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001838:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	095b      	lsrs	r3, r3, #5
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d102      	bne.n	8001854 <HAL_RCC_OscConfig+0xb24>
 800184e:	4b49      	ldr	r3, [pc, #292]	; (8001974 <HAL_RCC_OscConfig+0xc44>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	e01b      	b.n	800188c <HAL_RCC_OscConfig+0xb5c>
 8001854:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800185c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	fa93 f2a3 	rbit	r2, r3
 8001868:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001872:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	fa93 f2a3 	rbit	r2, r3
 8001882:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <HAL_RCC_OscConfig+0xc44>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001890:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001894:	6011      	str	r1, [r2, #0]
 8001896:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	fa92 f1a2 	rbit	r1, r2
 80018a0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80018a4:	6011      	str	r1, [r2, #0]
  return result;
 80018a6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	fab2 f282 	clz	r2, r2
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	f042 0220 	orr.w	r2, r2, #32
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f002 021f 	and.w	r2, r2, #31
 80018bc:	2101      	movs	r1, #1
 80018be:	fa01 f202 	lsl.w	r2, r1, r2
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d19e      	bne.n	8001806 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c8:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_RCC_OscConfig+0xc44>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	430b      	orrs	r3, r1
 80018de:	4925      	ldr	r1, [pc, #148]	; (8001974 <HAL_RCC_OscConfig+0xc44>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	fa93 f2a3 	rbit	r2, r3
 80018f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018fc:	601a      	str	r2, [r3, #0]
  return result;
 80018fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001902:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800190e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	461a      	mov	r2, r3
 8001916:	2301      	movs	r3, #1
 8001918:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7fe ff77 	bl	800080c <HAL_GetTick>
 800191e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001922:	e009      	b.n	8001938 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7fe ff72 	bl	800080c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e0fc      	b.n	8001b32 <HAL_RCC_OscConfig+0xe02>
 8001938:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800193c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	fa93 f2a3 	rbit	r2, r3
 800194c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001950:	601a      	str	r2, [r3, #0]
  return result;
 8001952:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001956:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <HAL_RCC_OscConfig+0xc48>
 800196c:	4b01      	ldr	r3, [pc, #4]	; (8001974 <HAL_RCC_OscConfig+0xc44>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	e01e      	b.n	80019b0 <HAL_RCC_OscConfig+0xc80>
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800197c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_OscConfig+0xe0c>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019b8:	6011      	str	r1, [r2, #0]
 80019ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	fa92 f1a2 	rbit	r1, r2
 80019c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019c8:	6011      	str	r1, [r2, #0]
  return result;
 80019ca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	fab2 f282 	clz	r2, r2
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f042 0220 	orr.w	r2, r2, #32
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f002 021f 	and.w	r2, r2, #31
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f202 	lsl.w	r2, r1, r2
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d09b      	beq.n	8001924 <HAL_RCC_OscConfig+0xbf4>
 80019ec:	e0a0      	b.n	8001b30 <HAL_RCC_OscConfig+0xe00>
 80019ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f2a3 	rbit	r2, r3
 8001a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a06:	601a      	str	r2, [r3, #0]
  return result;
 8001a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7fe fef2 	bl	800080c <HAL_GetTick>
 8001a28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2c:	e009      	b.n	8001a42 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7fe feed 	bl	800080c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e077      	b.n	8001b32 <HAL_RCC_OscConfig+0xe02>
 8001a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	fa93 f2a3 	rbit	r2, r3
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	601a      	str	r2, [r3, #0]
  return result;
 8001a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	095b      	lsrs	r3, r3, #5
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d102      	bne.n	8001a7c <HAL_RCC_OscConfig+0xd4c>
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_RCC_OscConfig+0xe0c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e01b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd84>
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f107 0320 	add.w	r3, r7, #32
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	fa93 f2a3 	rbit	r2, r3
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	f107 0318 	add.w	r3, r7, #24
 8001a9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f107 0318 	add.w	r3, r7, #24
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <HAL_RCC_OscConfig+0xe0c>)
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	f107 0210 	add.w	r2, r7, #16
 8001ab8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001abc:	6011      	str	r1, [r2, #0]
 8001abe:	f107 0210 	add.w	r2, r7, #16
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	fa92 f1a2 	rbit	r1, r2
 8001ac8:	f107 020c 	add.w	r2, r7, #12
 8001acc:	6011      	str	r1, [r2, #0]
  return result;
 8001ace:	f107 020c 	add.w	r2, r7, #12
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	fab2 f282 	clz	r2, r2
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	f042 0220 	orr.w	r2, r2, #32
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f002 021f 	and.w	r2, r2, #31
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d19e      	bne.n	8001a2e <HAL_RCC_OscConfig+0xcfe>
 8001af0:	e01e      	b.n	8001b30 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e018      	b.n	8001b32 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_RCC_OscConfig+0xe0c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b08:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d108      	bne.n	8001b2c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001b1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b09e      	sub	sp, #120	; 0x78
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e162      	b.n	8001e1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b90      	ldr	r3, [pc, #576]	; (8001d9c <HAL_RCC_ClockConfig+0x25c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d910      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b8d      	ldr	r3, [pc, #564]	; (8001d9c <HAL_RCC_ClockConfig+0x25c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 0207 	bic.w	r2, r3, #7
 8001b6e:	498b      	ldr	r1, [pc, #556]	; (8001d9c <HAL_RCC_ClockConfig+0x25c>)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b89      	ldr	r3, [pc, #548]	; (8001d9c <HAL_RCC_ClockConfig+0x25c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e14a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b82      	ldr	r3, [pc, #520]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	497f      	ldr	r1, [pc, #508]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80dc 	beq.w	8001d6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d13c      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xf6>
 8001bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bcc:	fab3 f383 	clz	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xa6>
 8001be0:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	e00f      	b.n	8001c06 <HAL_RCC_ClockConfig+0xc6>
 8001be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	667b      	str	r3, [r7, #100]	; 0x64
 8001bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8001bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c02:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c0e:	fa92 f2a2 	rbit	r2, r2
 8001c12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c16:	fab2 f282 	clz	r2, r2
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f042 0220 	orr.w	r2, r2, #32
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f002 021f 	and.w	r2, r2, #31
 8001c26:	2101      	movs	r1, #1
 8001c28:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d17b      	bne.n	8001d2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0f3      	b.n	8001e1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d13c      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x178>
 8001c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	095b      	lsrs	r3, r3, #5
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x128>
 8001c62:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e00f      	b.n	8001c88 <HAL_RCC_ClockConfig+0x148>
 8001c68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	647b      	str	r3, [r7, #68]	; 0x44
 8001c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8001c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c84:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c90:	fa92 f2a2 	rbit	r2, r2
 8001c94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c98:	fab2 f282 	clz	r2, r2
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	f042 0220 	orr.w	r2, r2, #32
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	f002 021f 	and.w	r2, r2, #31
 8001ca8:	2101      	movs	r1, #1
 8001caa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d13a      	bne.n	8001d2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0b2      	b.n	8001e1e <HAL_RCC_ClockConfig+0x2de>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x1a0>
 8001cda:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	e00d      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1bc>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
 8001cec:	2302      	movs	r3, #2
 8001cee:	623b      	str	r3, [r7, #32]
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	61ba      	str	r2, [r7, #24]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	fa92 f2a2 	rbit	r2, r2
 8001d06:	617a      	str	r2, [r7, #20]
  return result;
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	fab2 f282 	clz	r2, r2
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f042 0220 	orr.w	r2, r2, #32
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f002 021f 	and.w	r2, r2, #31
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e079      	b.n	8001e1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f023 0203 	bic.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	491a      	ldr	r1, [pc, #104]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7fe fd66 	bl	800080c <HAL_GetTick>
 8001d40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f7fe fd62 	bl	800080c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e061      	b.n	8001e1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_RCC_ClockConfig+0x260>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 020c 	and.w	r2, r3, #12
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d1eb      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_ClockConfig+0x25c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d214      	bcs.n	8001da4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_RCC_ClockConfig+0x25c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4906      	ldr	r1, [pc, #24]	; (8001d9c <HAL_RCC_ClockConfig+0x25c>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <HAL_RCC_ClockConfig+0x25c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e040      	b.n	8001e1e <HAL_RCC_ClockConfig+0x2de>
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d008      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCC_ClockConfig+0x2e8>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	491a      	ldr	r1, [pc, #104]	; (8001e28 <HAL_RCC_ClockConfig+0x2e8>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d009      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_RCC_ClockConfig+0x2e8>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4912      	ldr	r1, [pc, #72]	; (8001e28 <HAL_RCC_ClockConfig+0x2e8>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001de2:	f000 f829 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001de6:	4601      	mov	r1, r0
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_RCC_ClockConfig+0x2e8>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df0:	22f0      	movs	r2, #240	; 0xf0
 8001df2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	fa92 f2a2 	rbit	r2, r2
 8001dfa:	60fa      	str	r2, [r7, #12]
  return result;
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	fab2 f282 	clz	r2, r2
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	40d3      	lsrs	r3, r2
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <HAL_RCC_ClockConfig+0x2ec>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e0e:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <HAL_RCC_ClockConfig+0x2f0>)
 8001e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_RCC_ClockConfig+0x2f4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fc1a 	bl	8000650 <HAL_InitTick>
  
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3778      	adds	r7, #120	; 0x78
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	08005908 	.word	0x08005908
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000004 	.word	0x20000004

08001e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b08b      	sub	sp, #44	; 0x2c
 8001e3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d002      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x30>
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d003      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x36>
 8001e66:	e03c      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e68:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e6a:	623b      	str	r3, [r7, #32]
      break;
 8001e6c:	e03c      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	fa92 f2a2 	rbit	r2, r2
 8001e80:	607a      	str	r2, [r7, #4]
  return result;
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	fab2 f282 	clz	r2, r2
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	40d3      	lsrs	r3, r2
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e8e:	5cd3      	ldrb	r3, [r2, r3]
 8001e90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e92:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	fa92 f2a2 	rbit	r2, r2
 8001ea4:	60fa      	str	r2, [r7, #12]
  return result;
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	fab2 f282 	clz	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	40d3      	lsrs	r3, r2
 8001eb0:	4a14      	ldr	r2, [pc, #80]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	e004      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	623b      	str	r3, [r7, #32]
      break;
 8001ee0:	e002      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ee4:	623b      	str	r3, [r7, #32]
      break;
 8001ee6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	372c      	adds	r7, #44	; 0x2c
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	007a1200 	.word	0x007a1200
 8001f00:	08005920 	.word	0x08005920
 8001f04:	08005930 	.word	0x08005930
 8001f08:	003d0900 	.word	0x003d0900

08001f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000000 	.word	0x20000000

08001f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f2a:	f7ff ffef 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f2e:	4601      	mov	r1, r0
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	fa92 f2a2 	rbit	r2, r2
 8001f44:	603a      	str	r2, [r7, #0]
  return result;
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	fab2 f282 	clz	r2, r2
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	40d3      	lsrs	r3, r2
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08005918 	.word	0x08005918

08001f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f6e:	f7ff ffcd 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f72:	4601      	mov	r1, r0
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	fa92 f2a2 	rbit	r2, r2
 8001f88:	603a      	str	r2, [r7, #0]
  return result;
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	fab2 f282 	clz	r2, r2
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	40d3      	lsrs	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	08005918 	.word	0x08005918

08001fac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	220f      	movs	r2, #15
 8001fba:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_RCC_GetClockConfig+0x60>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0207 	and.w	r2, r3, #7
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	601a      	str	r2, [r3, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b092      	sub	sp, #72	; 0x48
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80cd 	beq.w	80021ce <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002034:	4b86      	ldr	r3, [pc, #536]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10e      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	4b83      	ldr	r3, [pc, #524]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	4a82      	ldr	r2, [pc, #520]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204a:	61d3      	str	r3, [r2, #28]
 800204c:	4b80      	ldr	r3, [pc, #512]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002058:	2301      	movs	r3, #1
 800205a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	4b7d      	ldr	r3, [pc, #500]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d118      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206a:	4b7a      	ldr	r3, [pc, #488]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a79      	ldr	r2, [pc, #484]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002074:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002076:	f7fe fbc9 	bl	800080c <HAL_GetTick>
 800207a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	e008      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207e:	f7fe fbc5 	bl	800080c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b64      	cmp	r3, #100	; 0x64
 800208a:	d901      	bls.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0db      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	4b70      	ldr	r3, [pc, #448]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800209c:	4b6c      	ldr	r3, [pc, #432]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d07d      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d076      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020ba:	4b65      	ldr	r3, [pc, #404]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	4b5e      	ldr	r3, [pc, #376]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	461a      	mov	r2, r3
 80020e4:	2301      	movs	r3, #1
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	4b55      	ldr	r3, [pc, #340]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	461a      	mov	r2, r3
 8002108:	2300      	movs	r3, #0
 800210a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800210c:	4a50      	ldr	r2, [pc, #320]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800210e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002110:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d045      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe fb76 	bl	800080c <HAL_GetTick>
 8002120:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	e00a      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7fe fb72 	bl	800080c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e086      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800213a:	2302      	movs	r3, #2
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	2302      	movs	r3, #2
 8002148:	623b      	str	r3, [r7, #32]
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	61fb      	str	r3, [r7, #28]
  return result;
 8002152:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d102      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002168:	4b39      	ldr	r3, [pc, #228]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	e007      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	4b35      	ldr	r3, [pc, #212]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	2202      	movs	r2, #2
 8002180:	613a      	str	r2, [r7, #16]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	fa92 f2a2 	rbit	r2, r2
 8002188:	60fa      	str	r2, [r7, #12]
  return result;
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	fab2 f282 	clz	r2, r2
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	f002 021f 	and.w	r2, r2, #31
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f202 	lsl.w	r2, r1, r2
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0bd      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4926      	ldr	r1, [pc, #152]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a22      	ldr	r2, [pc, #136]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021cc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d008      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f023 0203 	bic.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	491a      	ldr	r1, [pc, #104]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	f023 0210 	bic.w	r2, r3, #16
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4912      	ldr	r1, [pc, #72]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002206:	4313      	orrs	r3, r2
 8002208:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	490b      	ldr	r1, [pc, #44]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002224:	4313      	orrs	r3, r2
 8002226:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002242:	4313      	orrs	r3, r2
 8002244:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3748      	adds	r7, #72	; 0x48
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
 8002258:	10908100 	.word	0x10908100

0800225c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e049      	b.n	8002302 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe f980 	bl	8000588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3304      	adds	r3, #4
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f000 faa2 	bl	80027e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d001      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e040      	b.n	80023a6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_TIM_Base_Start_IT+0xa8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00e      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x58>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234e:	d009      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x58>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_TIM_Base_Start_IT+0xac>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d004      	beq.n	8002364 <HAL_TIM_Base_Start_IT+0x58>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a17      	ldr	r2, [pc, #92]	; (80023bc <HAL_TIM_Base_Start_IT+0xb0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d115      	bne.n	8002390 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_TIM_Base_Start_IT+0xb4>)
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b06      	cmp	r3, #6
 8002374:	d015      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x96>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237c:	d011      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	e008      	b.n	80023a2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e000      	b.n	80023a4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40014000 	.word	0x40014000
 80023c0:	00010007 	.word	0x00010007

080023c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d122      	bne.n	8002420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d11b      	bne.n	8002420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0202 	mvn.w	r2, #2
 80023f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f9ce 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f9c0 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f9d1 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b04      	cmp	r3, #4
 800242c:	d122      	bne.n	8002474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b04      	cmp	r3, #4
 800243a:	d11b      	bne.n	8002474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0204 	mvn.w	r2, #4
 8002444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f9a4 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f996 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f9a7 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b08      	cmp	r3, #8
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b08      	cmp	r3, #8
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0208 	mvn.w	r2, #8
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2204      	movs	r2, #4
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f97a 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f96c 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f97d 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d122      	bne.n	800251c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d11b      	bne.n	800251c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0210 	mvn.w	r2, #16
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2208      	movs	r2, #8
 80024f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f950 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f942 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f953 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d10e      	bne.n	8002548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0201 	mvn.w	r2, #1
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fd ffd4 	bl	80004f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002552:	2b80      	cmp	r3, #128	; 0x80
 8002554:	d10e      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d107      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fac2 	bl	8002af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002582:	d10e      	bne.n	80025a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b80      	cmp	r3, #128	; 0x80
 8002590:	d107      	bne.n	80025a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800259a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fab5 	bl	8002b0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b40      	cmp	r3, #64	; 0x40
 80025ae:	d10e      	bne.n	80025ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d107      	bne.n	80025ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f901 	bl	80027d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d10e      	bne.n	80025fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d107      	bne.n	80025fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f06f 0220 	mvn.w	r2, #32
 80025f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fa75 	bl	8002ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_TIM_ConfigClockSource+0x1c>
 800261a:	2302      	movs	r3, #2
 800261c:	e0b6      	b.n	800278c <HAL_TIM_ConfigClockSource+0x18a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2202      	movs	r2, #2
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002640:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002648:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265a:	d03e      	beq.n	80026da <HAL_TIM_ConfigClockSource+0xd8>
 800265c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002660:	f200 8087 	bhi.w	8002772 <HAL_TIM_ConfigClockSource+0x170>
 8002664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002668:	f000 8086 	beq.w	8002778 <HAL_TIM_ConfigClockSource+0x176>
 800266c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002670:	d87f      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x170>
 8002672:	2b70      	cmp	r3, #112	; 0x70
 8002674:	d01a      	beq.n	80026ac <HAL_TIM_ConfigClockSource+0xaa>
 8002676:	2b70      	cmp	r3, #112	; 0x70
 8002678:	d87b      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x170>
 800267a:	2b60      	cmp	r3, #96	; 0x60
 800267c:	d050      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x11e>
 800267e:	2b60      	cmp	r3, #96	; 0x60
 8002680:	d877      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x170>
 8002682:	2b50      	cmp	r3, #80	; 0x50
 8002684:	d03c      	beq.n	8002700 <HAL_TIM_ConfigClockSource+0xfe>
 8002686:	2b50      	cmp	r3, #80	; 0x50
 8002688:	d873      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x170>
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d058      	beq.n	8002740 <HAL_TIM_ConfigClockSource+0x13e>
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d86f      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x170>
 8002692:	2b30      	cmp	r3, #48	; 0x30
 8002694:	d064      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x15e>
 8002696:	2b30      	cmp	r3, #48	; 0x30
 8002698:	d86b      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x170>
 800269a:	2b20      	cmp	r3, #32
 800269c:	d060      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x15e>
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d867      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x170>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d05c      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x15e>
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d05a      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x15e>
 80026aa:	e062      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f000 f984 	bl	80029c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	609a      	str	r2, [r3, #8]
      break;
 80026d8:	e04f      	b.n	800277a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f000 f96d 	bl	80029c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026fc:	609a      	str	r2, [r3, #8]
      break;
 80026fe:	e03c      	b.n	800277a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	461a      	mov	r2, r3
 800270e:	f000 f8e1 	bl	80028d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2150      	movs	r1, #80	; 0x50
 8002718:	4618      	mov	r0, r3
 800271a:	f000 f93a 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 800271e:	e02c      	b.n	800277a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	461a      	mov	r2, r3
 800272e:	f000 f900 	bl	8002932 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2160      	movs	r1, #96	; 0x60
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f92a 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 800273e:	e01c      	b.n	800277a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	461a      	mov	r2, r3
 800274e:	f000 f8c1 	bl	80028d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f91a 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 800275e:	e00c      	b.n	800277a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f000 f911 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 8002770:	e003      	b.n	800277a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
      break;
 8002776:	e000      	b.n	800277a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002778:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a32      	ldr	r2, [pc, #200]	; (80028c0 <TIM_Base_SetConfig+0xdc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d007      	beq.n	800280c <TIM_Base_SetConfig+0x28>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002802:	d003      	beq.n	800280c <TIM_Base_SetConfig+0x28>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a2f      	ldr	r2, [pc, #188]	; (80028c4 <TIM_Base_SetConfig+0xe0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d108      	bne.n	800281e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a27      	ldr	r2, [pc, #156]	; (80028c0 <TIM_Base_SetConfig+0xdc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <TIM_Base_SetConfig+0x6a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282c:	d00f      	beq.n	800284e <TIM_Base_SetConfig+0x6a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <TIM_Base_SetConfig+0xe0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00b      	beq.n	800284e <TIM_Base_SetConfig+0x6a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <TIM_Base_SetConfig+0xe4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <TIM_Base_SetConfig+0x6a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a22      	ldr	r2, [pc, #136]	; (80028cc <TIM_Base_SetConfig+0xe8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d003      	beq.n	800284e <TIM_Base_SetConfig+0x6a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a21      	ldr	r2, [pc, #132]	; (80028d0 <TIM_Base_SetConfig+0xec>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d108      	bne.n	8002860 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <TIM_Base_SetConfig+0xdc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00b      	beq.n	80028a4 <TIM_Base_SetConfig+0xc0>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <TIM_Base_SetConfig+0xe4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d007      	beq.n	80028a4 <TIM_Base_SetConfig+0xc0>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <TIM_Base_SetConfig+0xe8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d003      	beq.n	80028a4 <TIM_Base_SetConfig+0xc0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <TIM_Base_SetConfig+0xec>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d103      	bne.n	80028ac <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	615a      	str	r2, [r3, #20]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40014000 	.word	0x40014000
 80028cc:	40014400 	.word	0x40014400
 80028d0:	40014800 	.word	0x40014800

080028d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f023 0201 	bic.w	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f023 030a 	bic.w	r3, r3, #10
 8002910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	621a      	str	r2, [r3, #32]
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002932:	b480      	push	{r7}
 8002934:	b087      	sub	sp, #28
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0210 	bic.w	r2, r3, #16
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800295c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	031b      	lsls	r3, r3, #12
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800296e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	621a      	str	r2, [r3, #32]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f043 0307 	orr.w	r3, r3, #7
 80029b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	609a      	str	r2, [r3, #8]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	021a      	lsls	r2, r3, #8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e054      	b.n	8002aca <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a24      	ldr	r2, [pc, #144]	; (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d108      	bne.n	8002a5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002a50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a88:	d009      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a11      	ldr	r2, [pc, #68]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40014000 	.word	0x40014000

08002ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e040      	b.n	8002bb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fd fd40 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	; 0x24
 8002b4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f82c 	bl	8002bbc <UART_SetConfig>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e022      	b.n	8002bb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f956 	bl	8002e28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f9dd 	bl	8002f6c <UART_CheckIdleState>
 8002bb2:	4603      	mov	r3, r0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b8a      	ldr	r3, [pc, #552]	; (8002e10 <UART_SetConfig+0x254>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	6979      	ldr	r1, [r7, #20]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a78      	ldr	r2, [pc, #480]	; (8002e14 <UART_SetConfig+0x258>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d120      	bne.n	8002c7a <UART_SetConfig+0xbe>
 8002c38:	4b77      	ldr	r3, [pc, #476]	; (8002e18 <UART_SetConfig+0x25c>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d817      	bhi.n	8002c74 <UART_SetConfig+0xb8>
 8002c44:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <UART_SetConfig+0x90>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	08002c5d 	.word	0x08002c5d
 8002c50:	08002c69 	.word	0x08002c69
 8002c54:	08002c6f 	.word	0x08002c6f
 8002c58:	08002c63 	.word	0x08002c63
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e01d      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c62:	2302      	movs	r3, #2
 8002c64:	77fb      	strb	r3, [r7, #31]
 8002c66:	e01a      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c68:	2304      	movs	r3, #4
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e017      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	77fb      	strb	r3, [r7, #31]
 8002c72:	e014      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c74:	2310      	movs	r3, #16
 8002c76:	77fb      	strb	r3, [r7, #31]
 8002c78:	e011      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a67      	ldr	r2, [pc, #412]	; (8002e1c <UART_SetConfig+0x260>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d102      	bne.n	8002c8a <UART_SetConfig+0xce>
 8002c84:	2300      	movs	r3, #0
 8002c86:	77fb      	strb	r3, [r7, #31]
 8002c88:	e009      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a64      	ldr	r2, [pc, #400]	; (8002e20 <UART_SetConfig+0x264>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d102      	bne.n	8002c9a <UART_SetConfig+0xde>
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e001      	b.n	8002c9e <UART_SetConfig+0xe2>
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca6:	d15b      	bne.n	8002d60 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002ca8:	7ffb      	ldrb	r3, [r7, #31]
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d827      	bhi.n	8002cfe <UART_SetConfig+0x142>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <UART_SetConfig+0xf8>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cd9 	.word	0x08002cd9
 8002cb8:	08002ce1 	.word	0x08002ce1
 8002cbc:	08002ce9 	.word	0x08002ce9
 8002cc0:	08002cff 	.word	0x08002cff
 8002cc4:	08002cef 	.word	0x08002cef
 8002cc8:	08002cff 	.word	0x08002cff
 8002ccc:	08002cff 	.word	0x08002cff
 8002cd0:	08002cff 	.word	0x08002cff
 8002cd4:	08002cf7 	.word	0x08002cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd8:	f7ff f924 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 8002cdc:	61b8      	str	r0, [r7, #24]
        break;
 8002cde:	e013      	b.n	8002d08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce0:	f7ff f942 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8002ce4:	61b8      	str	r0, [r7, #24]
        break;
 8002ce6:	e00f      	b.n	8002d08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ce8:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <UART_SetConfig+0x268>)
 8002cea:	61bb      	str	r3, [r7, #24]
        break;
 8002cec:	e00c      	b.n	8002d08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cee:	f7ff f8a3 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8002cf2:	61b8      	str	r0, [r7, #24]
        break;
 8002cf4:	e008      	b.n	8002d08 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfa:	61bb      	str	r3, [r7, #24]
        break;
 8002cfc:	e004      	b.n	8002d08 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	77bb      	strb	r3, [r7, #30]
        break;
 8002d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d074      	beq.n	8002df8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	005a      	lsls	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	441a      	add	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b0f      	cmp	r3, #15
 8002d2a:	d916      	bls.n	8002d5a <UART_SetConfig+0x19e>
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d212      	bcs.n	8002d5a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f023 030f 	bic.w	r3, r3, #15
 8002d3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	89fb      	ldrh	r3, [r7, #14]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	89fa      	ldrh	r2, [r7, #14]
 8002d56:	60da      	str	r2, [r3, #12]
 8002d58:	e04e      	b.n	8002df8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	77bb      	strb	r3, [r7, #30]
 8002d5e:	e04b      	b.n	8002df8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d60:	7ffb      	ldrb	r3, [r7, #31]
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d827      	bhi.n	8002db6 <UART_SetConfig+0x1fa>
 8002d66:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <UART_SetConfig+0x1b0>)
 8002d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6c:	08002d91 	.word	0x08002d91
 8002d70:	08002d99 	.word	0x08002d99
 8002d74:	08002da1 	.word	0x08002da1
 8002d78:	08002db7 	.word	0x08002db7
 8002d7c:	08002da7 	.word	0x08002da7
 8002d80:	08002db7 	.word	0x08002db7
 8002d84:	08002db7 	.word	0x08002db7
 8002d88:	08002db7 	.word	0x08002db7
 8002d8c:	08002daf 	.word	0x08002daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d90:	f7ff f8c8 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 8002d94:	61b8      	str	r0, [r7, #24]
        break;
 8002d96:	e013      	b.n	8002dc0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d98:	f7ff f8e6 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8002d9c:	61b8      	str	r0, [r7, #24]
        break;
 8002d9e:	e00f      	b.n	8002dc0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <UART_SetConfig+0x268>)
 8002da2:	61bb      	str	r3, [r7, #24]
        break;
 8002da4:	e00c      	b.n	8002dc0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da6:	f7ff f847 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8002daa:	61b8      	str	r0, [r7, #24]
        break;
 8002dac:	e008      	b.n	8002dc0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db2:	61bb      	str	r3, [r7, #24]
        break;
 8002db4:	e004      	b.n	8002dc0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	77bb      	strb	r3, [r7, #30]
        break;
 8002dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d018      	beq.n	8002df8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	085a      	lsrs	r2, r3, #1
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	441a      	add	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	d908      	bls.n	8002df4 <UART_SetConfig+0x238>
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d204      	bcs.n	8002df4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	e001      	b.n	8002df8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e04:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	efff69f3 	.word	0xefff69f3
 8002e14:	40013800 	.word	0x40013800
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40004400 	.word	0x40004400
 8002e20:	40004800 	.word	0x40004800
 8002e24:	007a1200 	.word	0x007a1200

08002e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01a      	beq.n	8002f3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f26:	d10a      	bne.n	8002f3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
  }
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f7c:	f7fd fc46 	bl	800080c <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d10e      	bne.n	8002fae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f82d 	bl	8002ffe <UART_WaitOnFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e023      	b.n	8002ff6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d10e      	bne.n	8002fda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f817 	bl	8002ffe <UART_WaitOnFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e00d      	b.n	8002ff6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b09c      	sub	sp, #112	; 0x70
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300e:	e0a5      	b.n	800315c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003016:	f000 80a1 	beq.w	800315c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7fd fbf7 	bl	800080c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <UART_WaitOnFlagUntilTimeout+0x32>
 800302a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800302c:	2b00      	cmp	r3, #0
 800302e:	d13e      	bne.n	80030ae <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800303e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003040:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003044:	667b      	str	r3, [r7, #100]	; 0x64
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800304e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003050:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003054:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800305c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e6      	bne.n	8003030 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3308      	adds	r3, #8
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	e853 3f00 	ldrex	r3, [r3]
 8003070:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	663b      	str	r3, [r7, #96]	; 0x60
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3308      	adds	r3, #8
 8003080:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003082:	64ba      	str	r2, [r7, #72]	; 0x48
 8003084:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e5      	bne.n	8003062 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e067      	b.n	800317e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d04f      	beq.n	800315c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ca:	d147      	bne.n	800315c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	e853 3f00 	ldrex	r3, [r3]
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
 80030f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e6      	bne.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3308      	adds	r3, #8
 800310e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	613b      	str	r3, [r7, #16]
   return(result);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3308      	adds	r3, #8
 8003126:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003128:	623a      	str	r2, [r7, #32]
 800312a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	69f9      	ldr	r1, [r7, #28]
 800312e:	6a3a      	ldr	r2, [r7, #32]
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	61bb      	str	r3, [r7, #24]
   return(result);
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e5      	bne.n	8003108 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e010      	b.n	800317e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4013      	ands	r3, r2
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	429a      	cmp	r2, r3
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	429a      	cmp	r2, r3
 8003178:	f43f af4a 	beq.w	8003010 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3770      	adds	r7, #112	; 0x70
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003198:	2b84      	cmp	r3, #132	; 0x84
 800319a:	d005      	beq.n	80031a8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800319c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	3303      	adds	r3, #3
 80031a6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80031a8:	68fb      	ldr	r3, [r7, #12]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031bc:	f3ef 8305 	mrs	r3, IPSR
 80031c0:	607b      	str	r3, [r7, #4]
  return(result);
 80031c2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80031de:	f001 f8bf 	bl	8004360 <vTaskStartScheduler>
  
  return osOK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af04      	add	r7, sp, #16
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d020      	beq.n	800323c <osThreadCreate+0x54>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01c      	beq.n	800323c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685c      	ldr	r4, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681d      	ldr	r5, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691e      	ldr	r6, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ffb6 	bl	8003186 <makeFreeRtosPriority>
 800321a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003224:	9202      	str	r2, [sp, #8]
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	9100      	str	r1, [sp, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	4632      	mov	r2, r6
 800322e:	4629      	mov	r1, r5
 8003230:	4620      	mov	r0, r4
 8003232:	f000 ff0b 	bl	800404c <xTaskCreateStatic>
 8003236:	4603      	mov	r3, r0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e01c      	b.n	8003276 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685c      	ldr	r4, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003248:	b29e      	uxth	r6, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff98 	bl	8003186 <makeFreeRtosPriority>
 8003256:	4602      	mov	r2, r0
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	9200      	str	r2, [sp, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	4632      	mov	r2, r6
 8003264:	4629      	mov	r1, r5
 8003266:	4620      	mov	r0, r4
 8003268:	f000 ff4c 	bl	8004104 <xTaskCreate>
 800326c:	4603      	mov	r3, r0
 800326e:	2b01      	cmp	r3, #1
 8003270:	d001      	beq.n	8003276 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003276:	68fb      	ldr	r3, [r7, #12]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003280 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00f      	beq.n	80032b2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10a      	bne.n	80032ae <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2203      	movs	r2, #3
 800329e:	9200      	str	r2, [sp, #0]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2100      	movs	r1, #0
 80032a4:	2001      	movs	r0, #1
 80032a6:	f000 f9bd 	bl	8003624 <xQueueGenericCreateStatic>
 80032aa:	4603      	mov	r3, r0
 80032ac:	e016      	b.n	80032dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e014      	b.n	80032dc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d110      	bne.n	80032da <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80032b8:	2203      	movs	r2, #3
 80032ba:	2100      	movs	r1, #0
 80032bc:	2001      	movs	r0, #1
 80032be:	f000 fa28 	bl	8003712 <xQueueGenericCreate>
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <osSemaphoreCreate+0x56>
 80032ca:	2300      	movs	r3, #0
 80032cc:	2200      	movs	r2, #0
 80032ce:	2100      	movs	r1, #0
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fa7b 	bl	80037cc <xQueueGenericSend>
      return sema;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	e000      	b.n	80032dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80032da:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	e03a      	b.n	8003372 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003306:	d103      	bne.n	8003310 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e009      	b.n	8003324 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d006      	beq.n	8003324 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <osSemaphoreWait+0x40>
      ticks = 1;
 8003320:	2301      	movs	r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003324:	f7ff ff47 	bl	80031b6 <inHandlerMode>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d017      	beq.n	800335e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	461a      	mov	r2, r3
 8003334:	2100      	movs	r1, #0
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fce0 	bl	8003cfc <xQueueReceiveFromISR>
 800333c:	4603      	mov	r3, r0
 800333e:	2b01      	cmp	r3, #1
 8003340:	d001      	beq.n	8003346 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003342:	23ff      	movs	r3, #255	; 0xff
 8003344:	e015      	b.n	8003372 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d011      	beq.n	8003370 <osSemaphoreWait+0x8c>
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <osSemaphoreWait+0x98>)
 800334e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	e008      	b.n	8003370 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800335e:	68f9      	ldr	r1, [r7, #12]
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fbbf 	bl	8003ae4 <xQueueSemaphoreTake>
 8003366:	4603      	mov	r3, r0
 8003368:	2b01      	cmp	r3, #1
 800336a:	d001      	beq.n	8003370 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800336c:	23ff      	movs	r3, #255	; 0xff
 800336e:	e000      	b.n	8003372 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	e000ed04 	.word	0xe000ed04

08003380 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003390:	f7ff ff11 	bl	80031b6 <inHandlerMode>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800339a:	f107 0308 	add.w	r3, r7, #8
 800339e:	4619      	mov	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fb11 	bl	80039c8 <xQueueGiveFromISR>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d001      	beq.n	80033b0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80033ac:	23ff      	movs	r3, #255	; 0xff
 80033ae:	e017      	b.n	80033e0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d013      	beq.n	80033de <osSemaphoreRelease+0x5e>
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <osSemaphoreRelease+0x68>)
 80033b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	e00a      	b.n	80033de <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80033c8:	2300      	movs	r3, #0
 80033ca:	2200      	movs	r2, #0
 80033cc:	2100      	movs	r1, #0
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f9fc 	bl	80037cc <xQueueGenericSend>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d001      	beq.n	80033de <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80033da:	23ff      	movs	r3, #255	; 0xff
 80033dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	e000ed04 	.word	0xe000ed04

080033ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f103 0208 	add.w	r2, r3, #8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003404:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f103 0208 	add.w	r2, r3, #8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f103 0208 	add.w	r2, r3, #8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003446:	b480      	push	{r7}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	601a      	str	r2, [r3, #0]
}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a4:	d103      	bne.n	80034ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	e00c      	b.n	80034c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3308      	adds	r3, #8
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e002      	b.n	80034bc <vListInsert+0x2e>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d2f6      	bcs.n	80034b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	601a      	str	r2, [r3, #0]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6892      	ldr	r2, [r2, #8]
 8003516:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6852      	ldr	r2, [r2, #4]
 8003520:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	d103      	bne.n	8003534 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800357e:	f001 fe69 	bl	8005254 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	441a      	add	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ae:	3b01      	subs	r3, #1
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035b4:	fb01 f303 	mul.w	r3, r1, r3
 80035b8:	441a      	add	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	22ff      	movs	r2, #255	; 0xff
 80035c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	22ff      	movs	r2, #255	; 0xff
 80035ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d114      	bne.n	80035fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01a      	beq.n	8003612 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3310      	adds	r3, #16
 80035e0:	4618      	mov	r0, r3
 80035e2:	f001 f905 	bl	80047f0 <xTaskRemoveFromEventList>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d012      	beq.n	8003612 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035ec:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <xQueueGenericReset+0xcc>)
 80035ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	e009      	b.n	8003612 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3310      	adds	r3, #16
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fef2 	bl	80033ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3324      	adds	r3, #36	; 0x24
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff feed 	bl	80033ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003612:	f001 fe4f 	bl	80052b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003616:	2301      	movs	r3, #1
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	e000ed04 	.word	0xe000ed04

08003624 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08e      	sub	sp, #56	; 0x38
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <xQueueGenericCreateStatic+0x52>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <xQueueGenericCreateStatic+0x56>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <xQueueGenericCreateStatic+0x58>
 800367a:	2300      	movs	r3, #0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	623b      	str	r3, [r7, #32]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <xQueueGenericCreateStatic+0x7e>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <xQueueGenericCreateStatic+0x82>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <xQueueGenericCreateStatic+0x84>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	61fb      	str	r3, [r7, #28]
}
 80036be:	bf00      	nop
 80036c0:	e7fe      	b.n	80036c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036c2:	2348      	movs	r3, #72	; 0x48
 80036c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b48      	cmp	r3, #72	; 0x48
 80036ca:	d00a      	beq.n	80036e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	61bb      	str	r3, [r7, #24]
}
 80036de:	bf00      	nop
 80036e0:	e7fe      	b.n	80036e0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00d      	beq.n	8003708 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f843 	bl	800378e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800370a:	4618      	mov	r0, r3
 800370c:	3730      	adds	r7, #48	; 0x30
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003712:	b580      	push	{r7, lr}
 8003714:	b08a      	sub	sp, #40	; 0x28
 8003716:	af02      	add	r7, sp, #8
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <xQueueGenericCreate+0x2a>
	__asm volatile
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	613b      	str	r3, [r7, #16]
}
 8003738:	bf00      	nop
 800373a:	e7fe      	b.n	800373a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	e004      	b.n	8003752 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3348      	adds	r3, #72	; 0x48
 8003756:	4618      	mov	r0, r3
 8003758:	f001 fe9e 	bl	8005498 <pvPortMalloc>
 800375c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00f      	beq.n	8003784 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	3348      	adds	r3, #72	; 0x48
 8003768:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003772:	79fa      	ldrb	r2, [r7, #7]
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f805 	bl	800378e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003784:	69bb      	ldr	r3, [r7, #24]
	}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	e002      	b.n	80037b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037bc:	2101      	movs	r1, #1
 80037be:	69b8      	ldr	r0, [r7, #24]
 80037c0:	f7ff fec8 	bl	8003554 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08e      	sub	sp, #56	; 0x38
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037da:	2300      	movs	r3, #0
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <xQueueGenericSend+0x32>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037fa:	bf00      	nop
 80037fc:	e7fe      	b.n	80037fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <xQueueGenericSend+0x40>
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <xQueueGenericSend+0x44>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <xQueueGenericSend+0x46>
 8003810:	2300      	movs	r3, #0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <xQueueGenericSend+0x60>
	__asm volatile
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003828:	bf00      	nop
 800382a:	e7fe      	b.n	800382a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d103      	bne.n	800383a <xQueueGenericSend+0x6e>
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <xQueueGenericSend+0x72>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <xQueueGenericSend+0x74>
 800383e:	2300      	movs	r3, #0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <xQueueGenericSend+0x8e>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	623b      	str	r3, [r7, #32]
}
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800385a:	f001 f98b 	bl	8004b74 <xTaskGetSchedulerState>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <xQueueGenericSend+0x9e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <xQueueGenericSend+0xa2>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <xQueueGenericSend+0xa4>
 800386e:	2300      	movs	r3, #0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <xQueueGenericSend+0xbe>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	61fb      	str	r3, [r7, #28]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800388a:	f001 fce3 	bl	8005254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <xQueueGenericSend+0xd4>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d129      	bne.n	80038f4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038a6:	f000 fac1 	bl	8003e2c <prvCopyDataToQueue>
 80038aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d010      	beq.n	80038d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	3324      	adds	r3, #36	; 0x24
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 ff99 	bl	80047f0 <xTaskRemoveFromEventList>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038c4:	4b3f      	ldr	r3, [pc, #252]	; (80039c4 <xQueueGenericSend+0x1f8>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	e00a      	b.n	80038ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038dc:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <xQueueGenericSend+0x1f8>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038ec:	f001 fce2 	bl	80052b4 <vPortExitCritical>
				return pdPASS;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e063      	b.n	80039bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d103      	bne.n	8003902 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038fa:	f001 fcdb 	bl	80052b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	e05c      	b.n	80039bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4618      	mov	r0, r3
 800390e:	f000 ffd1 	bl	80048b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003912:	2301      	movs	r3, #1
 8003914:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003916:	f001 fccd 	bl	80052b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800391a:	f000 fd81 	bl	8004420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800391e:	f001 fc99 	bl	8005254 <vPortEnterCritical>
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003928:	b25b      	sxtb	r3, r3
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800392e:	d103      	bne.n	8003938 <xQueueGenericSend+0x16c>
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800393e:	b25b      	sxtb	r3, r3
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003944:	d103      	bne.n	800394e <xQueueGenericSend+0x182>
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800394e:	f001 fcb1 	bl	80052b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003952:	1d3a      	adds	r2, r7, #4
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f000 ffc0 	bl	80048e0 <xTaskCheckForTimeOut>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d124      	bne.n	80039b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003968:	f000 fb58 	bl	800401c <prvIsQueueFull>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d018      	beq.n	80039a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	3310      	adds	r3, #16
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f000 ff14 	bl	80047a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003982:	f000 fae3 	bl	8003f4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003986:	f000 fd59 	bl	800443c <xTaskResumeAll>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	f47f af7c 	bne.w	800388a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <xQueueGenericSend+0x1f8>)
 8003994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	e772      	b.n	800388a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039a6:	f000 fad1 	bl	8003f4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039aa:	f000 fd47 	bl	800443c <xTaskResumeAll>
 80039ae:	e76c      	b.n	800388a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039b2:	f000 facb 	bl	8003f4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039b6:	f000 fd41 	bl	800443c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039ba:	2300      	movs	r3, #0
		}
	}
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3738      	adds	r7, #56	; 0x38
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08e      	sub	sp, #56	; 0x38
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	623b      	str	r3, [r7, #32]
}
 80039ee:	bf00      	nop
 80039f0:	e7fe      	b.n	80039f0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <xQueueGiveFromISR+0x48>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	61fb      	str	r3, [r7, #28]
}
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d103      	bne.n	8003a20 <xQueueGiveFromISR+0x58>
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <xQueueGiveFromISR+0x5c>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <xQueueGiveFromISR+0x5e>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	61bb      	str	r3, [r7, #24]
}
 8003a3c:	bf00      	nop
 8003a3e:	e7fe      	b.n	8003a3e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a40:	f001 fcea 	bl	8005418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a44:	f3ef 8211 	mrs	r2, BASEPRI
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	617a      	str	r2, [r7, #20]
 8003a5a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a5c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d22b      	bcs.n	8003ac8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8a:	d112      	bne.n	8003ab2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d016      	beq.n	8003ac2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	3324      	adds	r3, #36	; 0x24
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fea9 	bl	80047f0 <xTaskRemoveFromEventList>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00e      	beq.n	8003ac2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2201      	movs	r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e007      	b.n	8003ac2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	b25a      	sxtb	r2, r3
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac6:	e001      	b.n	8003acc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ad6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3738      	adds	r7, #56	; 0x38
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08e      	sub	sp, #56	; 0x38
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	623b      	str	r3, [r7, #32]
}
 8003b12:	bf00      	nop
 8003b14:	e7fe      	b.n	8003b14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	61fb      	str	r3, [r7, #28]
}
 8003b30:	bf00      	nop
 8003b32:	e7fe      	b.n	8003b32 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b34:	f001 f81e 	bl	8004b74 <xTaskGetSchedulerState>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <xQueueSemaphoreTake+0x60>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <xQueueSemaphoreTake+0x64>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <xQueueSemaphoreTake+0x66>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	61bb      	str	r3, [r7, #24]
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b64:	f001 fb76 	bl	8005254 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d024      	beq.n	8003bbe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	1e5a      	subs	r2, r3, #1
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003b84:	f001 f9c0 	bl	8004f08 <pvTaskIncrementMutexHeldCount>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00f      	beq.n	8003bb6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	3310      	adds	r3, #16
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fe28 	bl	80047f0 <xTaskRemoveFromEventList>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ba6:	4b54      	ldr	r3, [pc, #336]	; (8003cf8 <xQueueSemaphoreTake+0x214>)
 8003ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bb6:	f001 fb7d 	bl	80052b4 <vPortExitCritical>
				return pdPASS;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e097      	b.n	8003cee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d111      	bne.n	8003be8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	617b      	str	r3, [r7, #20]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003be0:	f001 fb68 	bl	80052b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e082      	b.n	8003cee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bee:	f107 030c 	add.w	r3, r7, #12
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fe5e 	bl	80048b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bfc:	f001 fb5a 	bl	80052b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c00:	f000 fc0e 	bl	8004420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c04:	f001 fb26 	bl	8005254 <vPortEnterCritical>
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c0e:	b25b      	sxtb	r3, r3
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c14:	d103      	bne.n	8003c1e <xQueueSemaphoreTake+0x13a>
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c24:	b25b      	sxtb	r3, r3
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c2a:	d103      	bne.n	8003c34 <xQueueSemaphoreTake+0x150>
 8003c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c34:	f001 fb3e 	bl	80052b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c38:	463a      	mov	r2, r7
 8003c3a:	f107 030c 	add.w	r3, r7, #12
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fe4d 	bl	80048e0 <xTaskCheckForTimeOut>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d132      	bne.n	8003cb2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c4e:	f000 f9cf 	bl	8003ff0 <prvIsQueueEmpty>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d026      	beq.n	8003ca6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003c60:	f001 faf8 	bl	8005254 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 ffa1 	bl	8004bb0 <xTaskPriorityInherit>
 8003c6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003c70:	f001 fb20 	bl	80052b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c76:	3324      	adds	r3, #36	; 0x24
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fd93 	bl	80047a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c84:	f000 f962 	bl	8003f4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c88:	f000 fbd8 	bl	800443c <xTaskResumeAll>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f47f af68 	bne.w	8003b64 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003c94:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <xQueueSemaphoreTake+0x214>)
 8003c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	e75e      	b.n	8003b64 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003ca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ca8:	f000 f950 	bl	8003f4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cac:	f000 fbc6 	bl	800443c <xTaskResumeAll>
 8003cb0:	e758      	b.n	8003b64 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cb4:	f000 f94a 	bl	8003f4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cb8:	f000 fbc0 	bl	800443c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cbe:	f000 f997 	bl	8003ff0 <prvIsQueueEmpty>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f43f af4d 	beq.w	8003b64 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003cd0:	f001 fac0 	bl	8005254 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003cd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cd6:	f000 f891 	bl	8003dfc <prvGetDisinheritPriorityAfterTimeout>
 8003cda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 f870 	bl	8004dc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ce8:	f001 fae4 	bl	80052b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3738      	adds	r7, #56	; 0x38
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08e      	sub	sp, #56	; 0x38
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	623b      	str	r3, [r7, #32]
}
 8003d24:	bf00      	nop
 8003d26:	e7fe      	b.n	8003d26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d103      	bne.n	8003d36 <xQueueReceiveFromISR+0x3a>
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <xQueueReceiveFromISR+0x3e>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <xQueueReceiveFromISR+0x40>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	61fb      	str	r3, [r7, #28]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d56:	f001 fb5f 	bl	8005418 <vPortValidateInterruptPriority>
	__asm volatile
 8003d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	61ba      	str	r2, [r7, #24]
 8003d70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003d72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02f      	beq.n	8003de2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d90:	f000 f8b6 	bl	8003f00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	1e5a      	subs	r2, r3, #1
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003d9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da4:	d112      	bne.n	8003dcc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	3310      	adds	r3, #16
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fd1c 	bl	80047f0 <xTaskRemoveFromEventList>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00e      	beq.n	8003ddc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e007      	b.n	8003ddc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	b25a      	sxtb	r2, r3
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
 8003de0:	e001      	b.n	8003de6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	637b      	str	r3, [r7, #52]	; 0x34
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f383 8811 	msr	BASEPRI, r3
}
 8003df0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3738      	adds	r7, #56	; 0x38
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d006      	beq.n	8003e1a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f1c3 0307 	rsb	r3, r3, #7
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e001      	b.n	8003e1e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
	}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10d      	bne.n	8003e66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d14d      	bne.n	8003eee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 ff30 	bl	8004cbc <xTaskPriorityDisinherit>
 8003e5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	e043      	b.n	8003eee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d119      	bne.n	8003ea0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6898      	ldr	r0, [r3, #8]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	461a      	mov	r2, r3
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	f001 fd0c 	bl	8005894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	441a      	add	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d32b      	bcc.n	8003eee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	609a      	str	r2, [r3, #8]
 8003e9e:	e026      	b.n	8003eee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68d8      	ldr	r0, [r3, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	f001 fcf2 	bl	8005894 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	425b      	negs	r3, r3
 8003eba:	441a      	add	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d207      	bcs.n	8003edc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	425b      	negs	r3, r3
 8003ed6:	441a      	add	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d105      	bne.n	8003eee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ef6:	697b      	ldr	r3, [r7, #20]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d018      	beq.n	8003f44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	441a      	add	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d303      	bcc.n	8003f34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68d9      	ldr	r1, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	f001 fca8 	bl	8005894 <memcpy>
	}
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f54:	f001 f97e 	bl	8005254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f60:	e011      	b.n	8003f86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d012      	beq.n	8003f90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3324      	adds	r3, #36	; 0x24
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fc3e 	bl	80047f0 <xTaskRemoveFromEventList>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f7a:	f000 fd13 	bl	80049a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	dce9      	bgt.n	8003f62 <prvUnlockQueue+0x16>
 8003f8e:	e000      	b.n	8003f92 <prvUnlockQueue+0x46>
					break;
 8003f90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	22ff      	movs	r2, #255	; 0xff
 8003f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f9a:	f001 f98b 	bl	80052b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f9e:	f001 f959 	bl	8005254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003faa:	e011      	b.n	8003fd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d012      	beq.n	8003fda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3310      	adds	r3, #16
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fc19 	bl	80047f0 <xTaskRemoveFromEventList>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fc4:	f000 fcee 	bl	80049a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fc8:	7bbb      	ldrb	r3, [r7, #14]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	dce9      	bgt.n	8003fac <prvUnlockQueue+0x60>
 8003fd8:	e000      	b.n	8003fdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003fda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	22ff      	movs	r2, #255	; 0xff
 8003fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fe4:	f001 f966 	bl	80052b4 <vPortExitCritical>
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ff8:	f001 f92c 	bl	8005254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	e001      	b.n	800400e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800400e:	f001 f951 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004024:	f001 f916 	bl	8005254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004030:	429a      	cmp	r2, r3
 8004032:	d102      	bne.n	800403a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e001      	b.n	800403e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800403e:	f001 f939 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 8004042:	68fb      	ldr	r3, [r7, #12]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08e      	sub	sp, #56	; 0x38
 8004050:	af04      	add	r7, sp, #16
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	623b      	str	r3, [r7, #32]
}
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <xTaskCreateStatic+0x46>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	61fb      	str	r3, [r7, #28]
}
 800408e:	bf00      	nop
 8004090:	e7fe      	b.n	8004090 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004092:	2354      	movs	r3, #84	; 0x54
 8004094:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b54      	cmp	r3, #84	; 0x54
 800409a:	d00a      	beq.n	80040b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	61bb      	str	r3, [r7, #24]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01e      	beq.n	80040f6 <xTaskCreateStatic+0xaa>
 80040b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01b      	beq.n	80040f6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040d0:	2300      	movs	r3, #0
 80040d2:	9303      	str	r3, [sp, #12]
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f850 	bl	800418e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040f0:	f000 f8cc 	bl	800428c <prvAddNewTaskToReadyList>
 80040f4:	e001      	b.n	80040fa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040fa:	697b      	ldr	r3, [r7, #20]
	}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3728      	adds	r7, #40	; 0x28
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08c      	sub	sp, #48	; 0x30
 8004108:	af04      	add	r7, sp, #16
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	4613      	mov	r3, r2
 8004112:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4618      	mov	r0, r3
 800411a:	f001 f9bd 	bl	8005498 <pvPortMalloc>
 800411e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00e      	beq.n	8004144 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004126:	2054      	movs	r0, #84	; 0x54
 8004128:	f001 f9b6 	bl	8005498 <pvPortMalloc>
 800412c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	631a      	str	r2, [r3, #48]	; 0x30
 800413a:	e005      	b.n	8004148 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800413c:	6978      	ldr	r0, [r7, #20]
 800413e:	f001 fa6f 	bl	8005620 <vPortFree>
 8004142:	e001      	b.n	8004148 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d017      	beq.n	800417e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004156:	88fa      	ldrh	r2, [r7, #6]
 8004158:	2300      	movs	r3, #0
 800415a:	9303      	str	r3, [sp, #12]
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	9302      	str	r3, [sp, #8]
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68b9      	ldr	r1, [r7, #8]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f80e 	bl	800418e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004172:	69f8      	ldr	r0, [r7, #28]
 8004174:	f000 f88a 	bl	800428c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004178:	2301      	movs	r3, #1
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	e002      	b.n	8004184 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800417e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004182:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004184:	69bb      	ldr	r3, [r7, #24]
	}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b088      	sub	sp, #32
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041a6:	3b01      	subs	r3, #1
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f023 0307 	bic.w	r3, r3, #7
 80041b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <prvInitialiseNewTask+0x48>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	617b      	str	r3, [r7, #20]
}
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e012      	b.n	8004202 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	7819      	ldrb	r1, [r3, #0]
 80041e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	3334      	adds	r3, #52	; 0x34
 80041ec:	460a      	mov	r2, r1
 80041ee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d006      	beq.n	800420a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	3301      	adds	r3, #1
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	2b0f      	cmp	r3, #15
 8004206:	d9e9      	bls.n	80041dc <prvInitialiseNewTask+0x4e>
 8004208:	e000      	b.n	800420c <prvInitialiseNewTask+0x7e>
		{
			break;
 800420a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	2b06      	cmp	r3, #6
 8004218:	d901      	bls.n	800421e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800421a:	2306      	movs	r3, #6
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	2200      	movs	r2, #0
 800422e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	3304      	adds	r3, #4
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff f8f9 	bl	800342c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	3318      	adds	r3, #24
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f8f4 	bl	800342c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004248:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	f1c3 0207 	rsb	r2, r3, #7
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004258:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	2200      	movs	r2, #0
 800425e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	68f9      	ldr	r1, [r7, #12]
 800426c:	69b8      	ldr	r0, [r7, #24]
 800426e:	f000 fec5 	bl	8004ffc <pxPortInitialiseStack>
 8004272:	4602      	mov	r2, r0
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004282:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004284:	bf00      	nop
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004294:	f000 ffde 	bl	8005254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004298:	4b2a      	ldr	r3, [pc, #168]	; (8004344 <prvAddNewTaskToReadyList+0xb8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3301      	adds	r3, #1
 800429e:	4a29      	ldr	r2, [pc, #164]	; (8004344 <prvAddNewTaskToReadyList+0xb8>)
 80042a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042a2:	4b29      	ldr	r3, [pc, #164]	; (8004348 <prvAddNewTaskToReadyList+0xbc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042aa:	4a27      	ldr	r2, [pc, #156]	; (8004348 <prvAddNewTaskToReadyList+0xbc>)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042b0:	4b24      	ldr	r3, [pc, #144]	; (8004344 <prvAddNewTaskToReadyList+0xb8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d110      	bne.n	80042da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042b8:	f000 fb98 	bl	80049ec <prvInitialiseTaskLists>
 80042bc:	e00d      	b.n	80042da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042be:	4b23      	ldr	r3, [pc, #140]	; (800434c <prvAddNewTaskToReadyList+0xc0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042c6:	4b20      	ldr	r3, [pc, #128]	; (8004348 <prvAddNewTaskToReadyList+0xbc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d802      	bhi.n	80042da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042d4:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <prvAddNewTaskToReadyList+0xbc>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042da:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <prvAddNewTaskToReadyList+0xc4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3301      	adds	r3, #1
 80042e0:	4a1b      	ldr	r2, [pc, #108]	; (8004350 <prvAddNewTaskToReadyList+0xc4>)
 80042e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	2201      	movs	r2, #1
 80042ea:	409a      	lsls	r2, r3
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <prvAddNewTaskToReadyList+0xc8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	4a18      	ldr	r2, [pc, #96]	; (8004354 <prvAddNewTaskToReadyList+0xc8>)
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4a15      	ldr	r2, [pc, #84]	; (8004358 <prvAddNewTaskToReadyList+0xcc>)
 8004304:	441a      	add	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3304      	adds	r3, #4
 800430a:	4619      	mov	r1, r3
 800430c:	4610      	mov	r0, r2
 800430e:	f7ff f89a 	bl	8003446 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004312:	f000 ffcf 	bl	80052b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <prvAddNewTaskToReadyList+0xc0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00e      	beq.n	800433c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <prvAddNewTaskToReadyList+0xbc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	429a      	cmp	r2, r3
 800432a:	d207      	bcs.n	800433c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <prvAddNewTaskToReadyList+0xd0>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000380 	.word	0x20000380
 8004348:	20000280 	.word	0x20000280
 800434c:	2000038c 	.word	0x2000038c
 8004350:	2000039c 	.word	0x2000039c
 8004354:	20000388 	.word	0x20000388
 8004358:	20000284 	.word	0x20000284
 800435c:	e000ed04 	.word	0xe000ed04

08004360 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800436e:	463a      	mov	r2, r7
 8004370:	1d39      	adds	r1, r7, #4
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	4618      	mov	r0, r3
 8004378:	f7fb ff2a 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	9202      	str	r2, [sp, #8]
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	2300      	movs	r3, #0
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	2300      	movs	r3, #0
 800438c:	460a      	mov	r2, r1
 800438e:	491e      	ldr	r1, [pc, #120]	; (8004408 <vTaskStartScheduler+0xa8>)
 8004390:	481e      	ldr	r0, [pc, #120]	; (800440c <vTaskStartScheduler+0xac>)
 8004392:	f7ff fe5b 	bl	800404c <xTaskCreateStatic>
 8004396:	4603      	mov	r3, r0
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <vTaskStartScheduler+0xb0>)
 800439a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800439c:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <vTaskStartScheduler+0xb0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043a4:	2301      	movs	r3, #1
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e001      	b.n	80043ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d116      	bne.n	80043e2 <vTaskStartScheduler+0x82>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	613b      	str	r3, [r7, #16]
}
 80043c6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043c8:	4b12      	ldr	r3, [pc, #72]	; (8004414 <vTaskStartScheduler+0xb4>)
 80043ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043d0:	4b11      	ldr	r3, [pc, #68]	; (8004418 <vTaskStartScheduler+0xb8>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <vTaskStartScheduler+0xbc>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043dc:	f000 fe98 	bl	8005110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043e0:	e00e      	b.n	8004400 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e8:	d10a      	bne.n	8004400 <vTaskStartScheduler+0xa0>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	60fb      	str	r3, [r7, #12]
}
 80043fc:	bf00      	nop
 80043fe:	e7fe      	b.n	80043fe <vTaskStartScheduler+0x9e>
}
 8004400:	bf00      	nop
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	08005900 	.word	0x08005900
 800440c:	080049bd 	.word	0x080049bd
 8004410:	200003a4 	.word	0x200003a4
 8004414:	200003a0 	.word	0x200003a0
 8004418:	2000038c 	.word	0x2000038c
 800441c:	20000384 	.word	0x20000384

08004420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <vTaskSuspendAll+0x18>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	4a03      	ldr	r2, [pc, #12]	; (8004438 <vTaskSuspendAll+0x18>)
 800442c:	6013      	str	r3, [r2, #0]
}
 800442e:	bf00      	nop
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	200003a8 	.word	0x200003a8

0800443c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800444a:	4b41      	ldr	r3, [pc, #260]	; (8004550 <xTaskResumeAll+0x114>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <xTaskResumeAll+0x2c>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	603b      	str	r3, [r7, #0]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004468:	f000 fef4 	bl	8005254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800446c:	4b38      	ldr	r3, [pc, #224]	; (8004550 <xTaskResumeAll+0x114>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3b01      	subs	r3, #1
 8004472:	4a37      	ldr	r2, [pc, #220]	; (8004550 <xTaskResumeAll+0x114>)
 8004474:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004476:	4b36      	ldr	r3, [pc, #216]	; (8004550 <xTaskResumeAll+0x114>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d161      	bne.n	8004542 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800447e:	4b35      	ldr	r3, [pc, #212]	; (8004554 <xTaskResumeAll+0x118>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d05d      	beq.n	8004542 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004486:	e02e      	b.n	80044e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004488:	4b33      	ldr	r3, [pc, #204]	; (8004558 <xTaskResumeAll+0x11c>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3318      	adds	r3, #24
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff f833 	bl	8003500 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3304      	adds	r3, #4
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff f82e 	bl	8003500 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	2201      	movs	r2, #1
 80044aa:	409a      	lsls	r2, r3
 80044ac:	4b2b      	ldr	r3, [pc, #172]	; (800455c <xTaskResumeAll+0x120>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	4a2a      	ldr	r2, [pc, #168]	; (800455c <xTaskResumeAll+0x120>)
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4a27      	ldr	r2, [pc, #156]	; (8004560 <xTaskResumeAll+0x124>)
 80044c4:	441a      	add	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f7fe ffba 	bl	8003446 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d6:	4b23      	ldr	r3, [pc, #140]	; (8004564 <xTaskResumeAll+0x128>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	429a      	cmp	r2, r3
 80044de:	d302      	bcc.n	80044e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80044e0:	4b21      	ldr	r3, [pc, #132]	; (8004568 <xTaskResumeAll+0x12c>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044e6:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <xTaskResumeAll+0x11c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1cc      	bne.n	8004488 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044f4:	f000 fb18 	bl	8004b28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044f8:	4b1c      	ldr	r3, [pc, #112]	; (800456c <xTaskResumeAll+0x130>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d010      	beq.n	8004526 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004504:	f000 f836 	bl	8004574 <xTaskIncrementTick>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800450e:	4b16      	ldr	r3, [pc, #88]	; (8004568 <xTaskResumeAll+0x12c>)
 8004510:	2201      	movs	r2, #1
 8004512:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3b01      	subs	r3, #1
 8004518:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f1      	bne.n	8004504 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004520:	4b12      	ldr	r3, [pc, #72]	; (800456c <xTaskResumeAll+0x130>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <xTaskResumeAll+0x12c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800452e:	2301      	movs	r3, #1
 8004530:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <xTaskResumeAll+0x134>)
 8004534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004542:	f000 feb7 	bl	80052b4 <vPortExitCritical>

	return xAlreadyYielded;
 8004546:	68bb      	ldr	r3, [r7, #8]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	200003a8 	.word	0x200003a8
 8004554:	20000380 	.word	0x20000380
 8004558:	20000340 	.word	0x20000340
 800455c:	20000388 	.word	0x20000388
 8004560:	20000284 	.word	0x20000284
 8004564:	20000280 	.word	0x20000280
 8004568:	20000394 	.word	0x20000394
 800456c:	20000390 	.word	0x20000390
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800457e:	4b51      	ldr	r3, [pc, #324]	; (80046c4 <xTaskIncrementTick+0x150>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 808d 	bne.w	80046a2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004588:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <xTaskIncrementTick+0x154>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004590:	4a4d      	ldr	r2, [pc, #308]	; (80046c8 <xTaskIncrementTick+0x154>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d120      	bne.n	80045de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800459c:	4b4b      	ldr	r3, [pc, #300]	; (80046cc <xTaskIncrementTick+0x158>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <xTaskIncrementTick+0x48>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	603b      	str	r3, [r7, #0]
}
 80045b8:	bf00      	nop
 80045ba:	e7fe      	b.n	80045ba <xTaskIncrementTick+0x46>
 80045bc:	4b43      	ldr	r3, [pc, #268]	; (80046cc <xTaskIncrementTick+0x158>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	4b43      	ldr	r3, [pc, #268]	; (80046d0 <xTaskIncrementTick+0x15c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a41      	ldr	r2, [pc, #260]	; (80046cc <xTaskIncrementTick+0x158>)
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	4a41      	ldr	r2, [pc, #260]	; (80046d0 <xTaskIncrementTick+0x15c>)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	4b40      	ldr	r3, [pc, #256]	; (80046d4 <xTaskIncrementTick+0x160>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3301      	adds	r3, #1
 80045d6:	4a3f      	ldr	r2, [pc, #252]	; (80046d4 <xTaskIncrementTick+0x160>)
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	f000 faa5 	bl	8004b28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045de:	4b3e      	ldr	r3, [pc, #248]	; (80046d8 <xTaskIncrementTick+0x164>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d34d      	bcc.n	8004684 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e8:	4b38      	ldr	r3, [pc, #224]	; (80046cc <xTaskIncrementTick+0x158>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <xTaskIncrementTick+0x82>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <xTaskIncrementTick+0x84>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <xTaskIncrementTick+0x164>)
 80045fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004602:	601a      	str	r2, [r3, #0]
					break;
 8004604:	e03e      	b.n	8004684 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004606:	4b31      	ldr	r3, [pc, #196]	; (80046cc <xTaskIncrementTick+0x158>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d203      	bcs.n	8004626 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800461e:	4a2e      	ldr	r2, [pc, #184]	; (80046d8 <xTaskIncrementTick+0x164>)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6013      	str	r3, [r2, #0]
						break;
 8004624:	e02e      	b.n	8004684 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	3304      	adds	r3, #4
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe ff68 	bl	8003500 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3318      	adds	r3, #24
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe ff5f 	bl	8003500 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	2201      	movs	r2, #1
 8004648:	409a      	lsls	r2, r3
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <xTaskIncrementTick+0x168>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <xTaskIncrementTick+0x168>)
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <xTaskIncrementTick+0x16c>)
 8004662:	441a      	add	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f7fe feeb 	bl	8003446 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <xTaskIncrementTick+0x170>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	429a      	cmp	r2, r3
 800467c:	d3b4      	bcc.n	80045e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800467e:	2301      	movs	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004682:	e7b1      	b.n	80045e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004684:	4b17      	ldr	r3, [pc, #92]	; (80046e4 <xTaskIncrementTick+0x170>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	4915      	ldr	r1, [pc, #84]	; (80046e0 <xTaskIncrementTick+0x16c>)
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d907      	bls.n	80046ac <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e004      	b.n	80046ac <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80046a2:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <xTaskIncrementTick+0x174>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3301      	adds	r3, #1
 80046a8:	4a0f      	ldr	r2, [pc, #60]	; (80046e8 <xTaskIncrementTick+0x174>)
 80046aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046ac:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <xTaskIncrementTick+0x178>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046b8:	697b      	ldr	r3, [r7, #20]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	200003a8 	.word	0x200003a8
 80046c8:	20000384 	.word	0x20000384
 80046cc:	20000338 	.word	0x20000338
 80046d0:	2000033c 	.word	0x2000033c
 80046d4:	20000398 	.word	0x20000398
 80046d8:	200003a0 	.word	0x200003a0
 80046dc:	20000388 	.word	0x20000388
 80046e0:	20000284 	.word	0x20000284
 80046e4:	20000280 	.word	0x20000280
 80046e8:	20000390 	.word	0x20000390
 80046ec:	20000394 	.word	0x20000394

080046f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046f6:	4b27      	ldr	r3, [pc, #156]	; (8004794 <vTaskSwitchContext+0xa4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046fe:	4b26      	ldr	r3, [pc, #152]	; (8004798 <vTaskSwitchContext+0xa8>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004704:	e03f      	b.n	8004786 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <vTaskSwitchContext+0xa8>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800470c:	4b23      	ldr	r3, [pc, #140]	; (800479c <vTaskSwitchContext+0xac>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	fab3 f383 	clz	r3, r3
 8004718:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800471a:	7afb      	ldrb	r3, [r7, #11]
 800471c:	f1c3 031f 	rsb	r3, r3, #31
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	491f      	ldr	r1, [pc, #124]	; (80047a0 <vTaskSwitchContext+0xb0>)
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	607b      	str	r3, [r7, #4]
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <vTaskSwitchContext+0x5a>
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4a12      	ldr	r2, [pc, #72]	; (80047a0 <vTaskSwitchContext+0xb0>)
 8004758:	4413      	add	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3308      	adds	r3, #8
 800476e:	429a      	cmp	r2, r3
 8004770:	d104      	bne.n	800477c <vTaskSwitchContext+0x8c>
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	605a      	str	r2, [r3, #4]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <vTaskSwitchContext+0xb4>)
 8004784:	6013      	str	r3, [r2, #0]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	200003a8 	.word	0x200003a8
 8004798:	20000394 	.word	0x20000394
 800479c:	20000388 	.word	0x20000388
 80047a0:	20000284 	.word	0x20000284
 80047a4:	20000280 	.word	0x20000280

080047a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60fb      	str	r3, [r7, #12]
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047ce:	4b07      	ldr	r3, [pc, #28]	; (80047ec <vTaskPlaceOnEventList+0x44>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3318      	adds	r3, #24
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fe fe59 	bl	800348e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047dc:	2101      	movs	r1, #1
 80047de:	6838      	ldr	r0, [r7, #0]
 80047e0:	f000 fba6 	bl	8004f30 <prvAddCurrentTaskToDelayedList>
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000280 	.word	0x20000280

080047f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	60fb      	str	r3, [r7, #12]
}
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	3318      	adds	r3, #24
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe fe6d 	bl	8003500 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004826:	4b1d      	ldr	r3, [pc, #116]	; (800489c <xTaskRemoveFromEventList+0xac>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11c      	bne.n	8004868 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	3304      	adds	r3, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fe64 	bl	8003500 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	2201      	movs	r2, #1
 800483e:	409a      	lsls	r2, r3
 8004840:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <xTaskRemoveFromEventList+0xb0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4313      	orrs	r3, r2
 8004846:	4a16      	ldr	r2, [pc, #88]	; (80048a0 <xTaskRemoveFromEventList+0xb0>)
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <xTaskRemoveFromEventList+0xb4>)
 8004858:	441a      	add	r2, r3
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7fe fdf0 	bl	8003446 <vListInsertEnd>
 8004866:	e005      	b.n	8004874 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3318      	adds	r3, #24
 800486c:	4619      	mov	r1, r3
 800486e:	480e      	ldr	r0, [pc, #56]	; (80048a8 <xTaskRemoveFromEventList+0xb8>)
 8004870:	f7fe fde9 	bl	8003446 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <xTaskRemoveFromEventList+0xbc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	429a      	cmp	r2, r3
 8004880:	d905      	bls.n	800488e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004882:	2301      	movs	r3, #1
 8004884:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <xTaskRemoveFromEventList+0xc0>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e001      	b.n	8004892 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004892:	697b      	ldr	r3, [r7, #20]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	200003a8 	.word	0x200003a8
 80048a0:	20000388 	.word	0x20000388
 80048a4:	20000284 	.word	0x20000284
 80048a8:	20000340 	.word	0x20000340
 80048ac:	20000280 	.word	0x20000280
 80048b0:	20000394 	.word	0x20000394

080048b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <vTaskInternalSetTimeOutState+0x24>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <vTaskInternalSetTimeOutState+0x28>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	605a      	str	r2, [r3, #4]
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	20000398 	.word	0x20000398
 80048dc:	20000384 	.word	0x20000384

080048e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	613b      	str	r3, [r7, #16]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	60fb      	str	r3, [r7, #12]
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004922:	f000 fc97 	bl	8005254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <xTaskCheckForTimeOut+0xbc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800493e:	d102      	bne.n	8004946 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e023      	b.n	800498e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <xTaskCheckForTimeOut+0xc0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d007      	beq.n	8004962 <xTaskCheckForTimeOut+0x82>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	429a      	cmp	r2, r3
 800495a:	d302      	bcc.n	8004962 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	e015      	b.n	800498e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	429a      	cmp	r2, r3
 800496a:	d20b      	bcs.n	8004984 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff ff9b 	bl	80048b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	e004      	b.n	800498e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800498a:	2301      	movs	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800498e:	f000 fc91 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 8004992:	69fb      	ldr	r3, [r7, #28]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000384 	.word	0x20000384
 80049a0:	20000398 	.word	0x20000398

080049a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049a8:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <vTaskMissedYield+0x14>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
}
 80049ae:	bf00      	nop
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	20000394 	.word	0x20000394

080049bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049c4:	f000 f852 	bl	8004a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <prvIdleTask+0x28>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d9f9      	bls.n	80049c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <prvIdleTask+0x2c>)
 80049d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049e0:	e7f0      	b.n	80049c4 <prvIdleTask+0x8>
 80049e2:	bf00      	nop
 80049e4:	20000284 	.word	0x20000284
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	e00c      	b.n	8004a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <prvInitialiseTaskLists+0x60>)
 8004a04:	4413      	add	r3, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fcf0 	bl	80033ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b06      	cmp	r3, #6
 8004a16:	d9ef      	bls.n	80049f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a18:	480d      	ldr	r0, [pc, #52]	; (8004a50 <prvInitialiseTaskLists+0x64>)
 8004a1a:	f7fe fce7 	bl	80033ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a1e:	480d      	ldr	r0, [pc, #52]	; (8004a54 <prvInitialiseTaskLists+0x68>)
 8004a20:	f7fe fce4 	bl	80033ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a24:	480c      	ldr	r0, [pc, #48]	; (8004a58 <prvInitialiseTaskLists+0x6c>)
 8004a26:	f7fe fce1 	bl	80033ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a2a:	480c      	ldr	r0, [pc, #48]	; (8004a5c <prvInitialiseTaskLists+0x70>)
 8004a2c:	f7fe fcde 	bl	80033ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a30:	480b      	ldr	r0, [pc, #44]	; (8004a60 <prvInitialiseTaskLists+0x74>)
 8004a32:	f7fe fcdb 	bl	80033ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <prvInitialiseTaskLists+0x78>)
 8004a38:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <prvInitialiseTaskLists+0x64>)
 8004a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <prvInitialiseTaskLists+0x7c>)
 8004a3e:	4a05      	ldr	r2, [pc, #20]	; (8004a54 <prvInitialiseTaskLists+0x68>)
 8004a40:	601a      	str	r2, [r3, #0]
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000284 	.word	0x20000284
 8004a50:	20000310 	.word	0x20000310
 8004a54:	20000324 	.word	0x20000324
 8004a58:	20000340 	.word	0x20000340
 8004a5c:	20000354 	.word	0x20000354
 8004a60:	2000036c 	.word	0x2000036c
 8004a64:	20000338 	.word	0x20000338
 8004a68:	2000033c 	.word	0x2000033c

08004a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a72:	e019      	b.n	8004aa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a74:	f000 fbee 	bl	8005254 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004a78:	4b10      	ldr	r3, [pc, #64]	; (8004abc <prvCheckTasksWaitingTermination+0x50>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fd3b 	bl	8003500 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <prvCheckTasksWaitingTermination+0x54>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <prvCheckTasksWaitingTermination+0x54>)
 8004a92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <prvCheckTasksWaitingTermination+0x58>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <prvCheckTasksWaitingTermination+0x58>)
 8004a9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a9e:	f000 fc09 	bl	80052b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f810 	bl	8004ac8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <prvCheckTasksWaitingTermination+0x58>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e1      	bne.n	8004a74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000354 	.word	0x20000354
 8004ac0:	20000380 	.word	0x20000380
 8004ac4:	20000368 	.word	0x20000368

08004ac8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fd9e 	bl	8005620 <vPortFree>
				vPortFree( pxTCB );
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fd9b 	bl	8005620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004aea:	e018      	b.n	8004b1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d103      	bne.n	8004afe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fd92 	bl	8005620 <vPortFree>
	}
 8004afc:	e00f      	b.n	8004b1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d00a      	beq.n	8004b1e <prvDeleteTCB+0x56>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	60fb      	str	r3, [r7, #12]
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <prvDeleteTCB+0x54>
	}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <prvResetNextTaskUnblockTime+0x44>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <prvResetNextTaskUnblockTime+0x14>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <prvResetNextTaskUnblockTime+0x16>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d004      	beq.n	8004b4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <prvResetNextTaskUnblockTime+0x48>)
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b4a:	e008      	b.n	8004b5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b4c:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <prvResetNextTaskUnblockTime+0x44>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4a05      	ldr	r2, [pc, #20]	; (8004b70 <prvResetNextTaskUnblockTime+0x48>)
 8004b5c:	6013      	str	r3, [r2, #0]
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000338 	.word	0x20000338
 8004b70:	200003a0 	.word	0x200003a0

08004b74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <xTaskGetSchedulerState+0x34>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b82:	2301      	movs	r3, #1
 8004b84:	607b      	str	r3, [r7, #4]
 8004b86:	e008      	b.n	8004b9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b88:	4b08      	ldr	r3, [pc, #32]	; (8004bac <xTaskGetSchedulerState+0x38>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b90:	2302      	movs	r3, #2
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	e001      	b.n	8004b9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b96:	2300      	movs	r3, #0
 8004b98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b9a:	687b      	ldr	r3, [r7, #4]
	}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	2000038c 	.word	0x2000038c
 8004bac:	200003a8 	.word	0x200003a8

08004bb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d06e      	beq.n	8004ca4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	4b39      	ldr	r3, [pc, #228]	; (8004cb0 <xTaskPriorityInherit+0x100>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d25e      	bcs.n	8004c92 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	db06      	blt.n	8004bea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bdc:	4b34      	ldr	r3, [pc, #208]	; (8004cb0 <xTaskPriorityInherit+0x100>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	f1c3 0207 	rsb	r2, r3, #7
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	6959      	ldr	r1, [r3, #20]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4a2e      	ldr	r2, [pc, #184]	; (8004cb4 <xTaskPriorityInherit+0x104>)
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4299      	cmp	r1, r3
 8004c00:	d101      	bne.n	8004c06 <xTaskPriorityInherit+0x56>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <xTaskPriorityInherit+0x58>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d03a      	beq.n	8004c82 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe fc75 	bl	8003500 <uxListRemove>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d115      	bne.n	8004c48 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c20:	4924      	ldr	r1, [pc, #144]	; (8004cb4 <xTaskPriorityInherit+0x104>)
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <xTaskPriorityInherit+0x98>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	2201      	movs	r2, #1
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43da      	mvns	r2, r3
 8004c3e:	4b1e      	ldr	r3, [pc, #120]	; (8004cb8 <xTaskPriorityInherit+0x108>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4013      	ands	r3, r2
 8004c44:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <xTaskPriorityInherit+0x108>)
 8004c46:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c48:	4b19      	ldr	r3, [pc, #100]	; (8004cb0 <xTaskPriorityInherit+0x100>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	2201      	movs	r2, #1
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <xTaskPriorityInherit+0x108>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <xTaskPriorityInherit+0x108>)
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <xTaskPriorityInherit+0x104>)
 8004c72:	441a      	add	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f7fe fbe3 	bl	8003446 <vListInsertEnd>
 8004c80:	e004      	b.n	8004c8c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <xTaskPriorityInherit+0x100>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e008      	b.n	8004ca4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <xTaskPriorityInherit+0x100>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d201      	bcs.n	8004ca4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
	}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000280 	.word	0x20000280
 8004cb4:	20000284 	.word	0x20000284
 8004cb8:	20000388 	.word	0x20000388

08004cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d06e      	beq.n	8004db0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cd2:	4b3a      	ldr	r3, [pc, #232]	; (8004dbc <xTaskPriorityDisinherit+0x100>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d00a      	beq.n	8004cf2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60fb      	str	r3, [r7, #12]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10a      	bne.n	8004d10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	60bb      	str	r3, [r7, #8]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d14:	1e5a      	subs	r2, r3, #1
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d044      	beq.n	8004db0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d140      	bne.n	8004db0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fbe4 	bl	8003500 <uxListRemove>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d115      	bne.n	8004d6a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d42:	491f      	ldr	r1, [pc, #124]	; (8004dc0 <xTaskPriorityDisinherit+0x104>)
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xTaskPriorityDisinherit+0xae>
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	2201      	movs	r2, #1
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <xTaskPriorityDisinherit+0x108>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4013      	ands	r3, r2
 8004d66:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <xTaskPriorityDisinherit+0x108>)
 8004d68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	f1c3 0207 	rsb	r2, r3, #7
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	2201      	movs	r2, #1
 8004d84:	409a      	lsls	r2, r3
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <xTaskPriorityDisinherit+0x108>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	4a0d      	ldr	r2, [pc, #52]	; (8004dc4 <xTaskPriorityDisinherit+0x108>)
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <xTaskPriorityDisinherit+0x104>)
 8004d9e:	441a      	add	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f7fe fb4d 	bl	8003446 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004db0:	697b      	ldr	r3, [r7, #20]
	}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000280 	.word	0x20000280
 8004dc0:	20000284 	.word	0x20000284
 8004dc4:	20000388 	.word	0x20000388

08004dc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8088 	beq.w	8004ef2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	60fb      	str	r3, [r7, #12]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d902      	bls.n	8004e10 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	e002      	b.n	8004e16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d068      	beq.n	8004ef2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d163      	bne.n	8004ef2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e2a:	4b34      	ldr	r3, [pc, #208]	; (8004efc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d10a      	bne.n	8004e4a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60bb      	str	r3, [r7, #8]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	db04      	blt.n	8004e68 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	f1c3 0207 	rsb	r2, r3, #7
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	6959      	ldr	r1, [r3, #20]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004e78:	4413      	add	r3, r2
 8004e7a:	4299      	cmp	r1, r3
 8004e7c:	d101      	bne.n	8004e82 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d034      	beq.n	8004ef2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe fb37 	bl	8003500 <uxListRemove>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d115      	bne.n	8004ec4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	4918      	ldr	r1, [pc, #96]	; (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43da      	mvns	r2, r3
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	4a10      	ldr	r2, [pc, #64]	; (8004f04 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004ec2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	2201      	movs	r2, #1
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	4a0c      	ldr	r2, [pc, #48]	; (8004f04 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4a07      	ldr	r2, [pc, #28]	; (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004ee4:	441a      	add	r2, r3
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7fe faaa 	bl	8003446 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ef2:	bf00      	nop
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000280 	.word	0x20000280
 8004f00:	20000284 	.word	0x20000284
 8004f04:	20000388 	.word	0x20000388

08004f08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004f0c:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f1a:	3201      	adds	r2, #1
 8004f1c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004f1e:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f20:	681b      	ldr	r3, [r3, #0]
	}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000280 	.word	0x20000280

08004f30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f3a:	4b29      	ldr	r3, [pc, #164]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f40:	4b28      	ldr	r3, [pc, #160]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe fada 	bl	8003500 <uxListRemove>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10b      	bne.n	8004f6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004f52:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	2201      	movs	r2, #1
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43da      	mvns	r2, r3
 8004f60:	4b21      	ldr	r3, [pc, #132]	; (8004fe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4013      	ands	r3, r2
 8004f66:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f70:	d10a      	bne.n	8004f88 <prvAddCurrentTaskToDelayedList+0x58>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f78:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4619      	mov	r1, r3
 8004f80:	481a      	ldr	r0, [pc, #104]	; (8004fec <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f82:	f7fe fa60 	bl	8003446 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f86:	e026      	b.n	8004fd6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d209      	bcs.n	8004fb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4619      	mov	r1, r3
 8004fac:	4610      	mov	r0, r2
 8004fae:	f7fe fa6e 	bl	800348e <vListInsert>
}
 8004fb2:	e010      	b.n	8004fd6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f7fe fa64 	bl	800348e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d202      	bcs.n	8004fd6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004fd0:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6013      	str	r3, [r2, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000384 	.word	0x20000384
 8004fe4:	20000280 	.word	0x20000280
 8004fe8:	20000388 	.word	0x20000388
 8004fec:	2000036c 	.word	0x2000036c
 8004ff0:	2000033c 	.word	0x2000033c
 8004ff4:	20000338 	.word	0x20000338
 8004ff8:	200003a0 	.word	0x200003a0

08004ffc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3b04      	subs	r3, #4
 800500c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3b04      	subs	r3, #4
 800501a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3b04      	subs	r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800502c:	4a0c      	ldr	r2, [pc, #48]	; (8005060 <pxPortInitialiseStack+0x64>)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3b14      	subs	r3, #20
 8005036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3b04      	subs	r3, #4
 8005042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f06f 0202 	mvn.w	r2, #2
 800504a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3b20      	subs	r3, #32
 8005050:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005052:	68fb      	ldr	r3, [r7, #12]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	08005065 	.word	0x08005065

08005064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <prvTaskExitError+0x54>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005076:	d00a      	beq.n	800508e <prvTaskExitError+0x2a>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	60fb      	str	r3, [r7, #12]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <prvTaskExitError+0x28>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	60bb      	str	r3, [r7, #8]
}
 80050a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050a2:	bf00      	nop
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0fc      	beq.n	80050a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	2000000c 	.word	0x2000000c
 80050bc:	00000000 	.word	0x00000000

080050c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <pxCurrentTCBConst2>)
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	6808      	ldr	r0, [r1, #0]
 80050c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ca:	f380 8809 	msr	PSP, r0
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f380 8811 	msr	BASEPRI, r0
 80050da:	4770      	bx	lr
 80050dc:	f3af 8000 	nop.w

080050e0 <pxCurrentTCBConst2>:
 80050e0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop

080050e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050e8:	4808      	ldr	r0, [pc, #32]	; (800510c <prvPortStartFirstTask+0x24>)
 80050ea:	6800      	ldr	r0, [r0, #0]
 80050ec:	6800      	ldr	r0, [r0, #0]
 80050ee:	f380 8808 	msr	MSP, r0
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8814 	msr	CONTROL, r0
 80050fa:	b662      	cpsie	i
 80050fc:	b661      	cpsie	f
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	df00      	svc	0
 8005108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800510a:	bf00      	nop
 800510c:	e000ed08 	.word	0xe000ed08

08005110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005116:	4b46      	ldr	r3, [pc, #280]	; (8005230 <xPortStartScheduler+0x120>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a46      	ldr	r2, [pc, #280]	; (8005234 <xPortStartScheduler+0x124>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10a      	bne.n	8005136 <xPortStartScheduler+0x26>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	613b      	str	r3, [r7, #16]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005136:	4b3e      	ldr	r3, [pc, #248]	; (8005230 <xPortStartScheduler+0x120>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a3f      	ldr	r2, [pc, #252]	; (8005238 <xPortStartScheduler+0x128>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10a      	bne.n	8005156 <xPortStartScheduler+0x46>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	60fb      	str	r3, [r7, #12]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005156:	4b39      	ldr	r3, [pc, #228]	; (800523c <xPortStartScheduler+0x12c>)
 8005158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005178:	b2da      	uxtb	r2, r3
 800517a:	4b31      	ldr	r3, [pc, #196]	; (8005240 <xPortStartScheduler+0x130>)
 800517c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800517e:	4b31      	ldr	r3, [pc, #196]	; (8005244 <xPortStartScheduler+0x134>)
 8005180:	2207      	movs	r2, #7
 8005182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005184:	e009      	b.n	800519a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005186:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <xPortStartScheduler+0x134>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3b01      	subs	r3, #1
 800518c:	4a2d      	ldr	r2, [pc, #180]	; (8005244 <xPortStartScheduler+0x134>)
 800518e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800519a:	78fb      	ldrb	r3, [r7, #3]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d0ef      	beq.n	8005186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051a6:	4b27      	ldr	r3, [pc, #156]	; (8005244 <xPortStartScheduler+0x134>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f1c3 0307 	rsb	r3, r3, #7
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d00a      	beq.n	80051c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60bb      	str	r3, [r7, #8]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051c8:	4b1e      	ldr	r3, [pc, #120]	; (8005244 <xPortStartScheduler+0x134>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <xPortStartScheduler+0x134>)
 80051d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051d2:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <xPortStartScheduler+0x134>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051da:	4a1a      	ldr	r2, [pc, #104]	; (8005244 <xPortStartScheduler+0x134>)
 80051dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051e6:	4b18      	ldr	r3, [pc, #96]	; (8005248 <xPortStartScheduler+0x138>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a17      	ldr	r2, [pc, #92]	; (8005248 <xPortStartScheduler+0x138>)
 80051ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <xPortStartScheduler+0x138>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a14      	ldr	r2, [pc, #80]	; (8005248 <xPortStartScheduler+0x138>)
 80051f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051fe:	f000 f8dd 	bl	80053bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <xPortStartScheduler+0x13c>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005208:	f000 f8fc 	bl	8005404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <xPortStartScheduler+0x140>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0f      	ldr	r2, [pc, #60]	; (8005250 <xPortStartScheduler+0x140>)
 8005212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005218:	f7ff ff66 	bl	80050e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800521c:	f7ff fa68 	bl	80046f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005220:	f7ff ff20 	bl	8005064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	e000ed00 	.word	0xe000ed00
 8005234:	410fc271 	.word	0x410fc271
 8005238:	410fc270 	.word	0x410fc270
 800523c:	e000e400 	.word	0xe000e400
 8005240:	200003ac 	.word	0x200003ac
 8005244:	200003b0 	.word	0x200003b0
 8005248:	e000ed20 	.word	0xe000ed20
 800524c:	2000000c 	.word	0x2000000c
 8005250:	e000ef34 	.word	0xe000ef34

08005254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	607b      	str	r3, [r7, #4]
}
 800526c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <vPortEnterCritical+0x58>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <vPortEnterCritical+0x58>)
 8005276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <vPortEnterCritical+0x58>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d10f      	bne.n	80052a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <vPortEnterCritical+0x5c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	603b      	str	r3, [r7, #0]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <vPortEnterCritical+0x4a>
	}
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	2000000c 	.word	0x2000000c
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ba:	4b12      	ldr	r3, [pc, #72]	; (8005304 <vPortExitCritical+0x50>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <vPortExitCritical+0x24>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	607b      	str	r3, [r7, #4]
}
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <vPortExitCritical+0x50>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3b01      	subs	r3, #1
 80052de:	4a09      	ldr	r2, [pc, #36]	; (8005304 <vPortExitCritical+0x50>)
 80052e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052e2:	4b08      	ldr	r3, [pc, #32]	; (8005304 <vPortExitCritical+0x50>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d105      	bne.n	80052f6 <vPortExitCritical+0x42>
 80052ea:	2300      	movs	r3, #0
 80052ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f383 8811 	msr	BASEPRI, r3
}
 80052f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	2000000c 	.word	0x2000000c
	...

08005310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005310:	f3ef 8009 	mrs	r0, PSP
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	4b15      	ldr	r3, [pc, #84]	; (8005370 <pxCurrentTCBConst>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	f01e 0f10 	tst.w	lr, #16
 8005320:	bf08      	it	eq
 8005322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532a:	6010      	str	r0, [r2, #0]
 800532c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005334:	f380 8811 	msr	BASEPRI, r0
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f7ff f9d6 	bl	80046f0 <vTaskSwitchContext>
 8005344:	f04f 0000 	mov.w	r0, #0
 8005348:	f380 8811 	msr	BASEPRI, r0
 800534c:	bc09      	pop	{r0, r3}
 800534e:	6819      	ldr	r1, [r3, #0]
 8005350:	6808      	ldr	r0, [r1, #0]
 8005352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005356:	f01e 0f10 	tst.w	lr, #16
 800535a:	bf08      	it	eq
 800535c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005360:	f380 8809 	msr	PSP, r0
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	f3af 8000 	nop.w

08005370 <pxCurrentTCBConst>:
 8005370:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop

08005378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	607b      	str	r3, [r7, #4]
}
 8005390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005392:	f7ff f8ef 	bl	8004574 <xTaskIncrementTick>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <SysTick_Handler+0x40>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	2300      	movs	r3, #0
 80053a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f383 8811 	msr	BASEPRI, r3
}
 80053ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <vPortSetupTimerInterrupt+0x34>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053c6:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <vPortSetupTimerInterrupt+0x38>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <vPortSetupTimerInterrupt+0x3c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <vPortSetupTimerInterrupt+0x40>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	099b      	lsrs	r3, r3, #6
 80053d8:	4a09      	ldr	r2, [pc, #36]	; (8005400 <vPortSetupTimerInterrupt+0x44>)
 80053da:	3b01      	subs	r3, #1
 80053dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053de:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <vPortSetupTimerInterrupt+0x34>)
 80053e0:	2207      	movs	r2, #7
 80053e2:	601a      	str	r2, [r3, #0]
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	e000e010 	.word	0xe000e010
 80053f4:	e000e018 	.word	0xe000e018
 80053f8:	20000000 	.word	0x20000000
 80053fc:	10624dd3 	.word	0x10624dd3
 8005400:	e000e014 	.word	0xe000e014

08005404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005414 <vPortEnableVFP+0x10>
 8005408:	6801      	ldr	r1, [r0, #0]
 800540a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800540e:	6001      	str	r1, [r0, #0]
 8005410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005412:	bf00      	nop
 8005414:	e000ed88 	.word	0xe000ed88

08005418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800541e:	f3ef 8305 	mrs	r3, IPSR
 8005422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b0f      	cmp	r3, #15
 8005428:	d914      	bls.n	8005454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800542a:	4a17      	ldr	r2, [pc, #92]	; (8005488 <vPortValidateInterruptPriority+0x70>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005434:	4b15      	ldr	r3, [pc, #84]	; (800548c <vPortValidateInterruptPriority+0x74>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	7afa      	ldrb	r2, [r7, #11]
 800543a:	429a      	cmp	r2, r3
 800543c:	d20a      	bcs.n	8005454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	607b      	str	r3, [r7, #4]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005454:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <vPortValidateInterruptPriority+0x78>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800545c:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <vPortValidateInterruptPriority+0x7c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d90a      	bls.n	800547a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	603b      	str	r3, [r7, #0]
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <vPortValidateInterruptPriority+0x60>
	}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	e000e3f0 	.word	0xe000e3f0
 800548c:	200003ac 	.word	0x200003ac
 8005490:	e000ed0c 	.word	0xe000ed0c
 8005494:	200003b0 	.word	0x200003b0

08005498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054a4:	f7fe ffbc 	bl	8004420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054a8:	4b58      	ldr	r3, [pc, #352]	; (800560c <pvPortMalloc+0x174>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054b0:	f000 f910 	bl	80056d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054b4:	4b56      	ldr	r3, [pc, #344]	; (8005610 <pvPortMalloc+0x178>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f040 808e 	bne.w	80055de <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01d      	beq.n	8005504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054c8:	2208      	movs	r2, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d014      	beq.n	8005504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	3308      	adds	r3, #8
 80054e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <pvPortMalloc+0x6c>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	617b      	str	r3, [r7, #20]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d069      	beq.n	80055de <pvPortMalloc+0x146>
 800550a:	4b42      	ldr	r3, [pc, #264]	; (8005614 <pvPortMalloc+0x17c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d864      	bhi.n	80055de <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005514:	4b40      	ldr	r3, [pc, #256]	; (8005618 <pvPortMalloc+0x180>)
 8005516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005518:	4b3f      	ldr	r3, [pc, #252]	; (8005618 <pvPortMalloc+0x180>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800551e:	e004      	b.n	800552a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d903      	bls.n	800553c <pvPortMalloc+0xa4>
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f1      	bne.n	8005520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800553c:	4b33      	ldr	r3, [pc, #204]	; (800560c <pvPortMalloc+0x174>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005542:	429a      	cmp	r2, r3
 8005544:	d04b      	beq.n	80055de <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2208      	movs	r2, #8
 800554c:	4413      	add	r3, r2
 800554e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	2308      	movs	r3, #8
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	429a      	cmp	r2, r3
 8005566:	d91f      	bls.n	80055a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <pvPortMalloc+0xf8>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	613b      	str	r3, [r7, #16]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	1ad2      	subs	r2, r2, r3
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055a2:	69b8      	ldr	r0, [r7, #24]
 80055a4:	f000 f8f8 	bl	8005798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055a8:	4b1a      	ldr	r3, [pc, #104]	; (8005614 <pvPortMalloc+0x17c>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	4a18      	ldr	r2, [pc, #96]	; (8005614 <pvPortMalloc+0x17c>)
 80055b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055b6:	4b17      	ldr	r3, [pc, #92]	; (8005614 <pvPortMalloc+0x17c>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b18      	ldr	r3, [pc, #96]	; (800561c <pvPortMalloc+0x184>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d203      	bcs.n	80055ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055c2:	4b14      	ldr	r3, [pc, #80]	; (8005614 <pvPortMalloc+0x17c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a15      	ldr	r2, [pc, #84]	; (800561c <pvPortMalloc+0x184>)
 80055c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	4b10      	ldr	r3, [pc, #64]	; (8005610 <pvPortMalloc+0x178>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055de:	f7fe ff2d 	bl	800443c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <pvPortMalloc+0x16a>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	60fb      	str	r3, [r7, #12]
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <pvPortMalloc+0x168>
	return pvReturn;
 8005602:	69fb      	ldr	r3, [r7, #28]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3728      	adds	r7, #40	; 0x28
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20000fbc 	.word	0x20000fbc
 8005610:	20000fc8 	.word	0x20000fc8
 8005614:	20000fc0 	.word	0x20000fc0
 8005618:	20000fb4 	.word	0x20000fb4
 800561c:	20000fc4 	.word	0x20000fc4

08005620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d048      	beq.n	80056c4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005632:	2308      	movs	r3, #8
 8005634:	425b      	negs	r3, r3
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	4b21      	ldr	r3, [pc, #132]	; (80056cc <vPortFree+0xac>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4013      	ands	r3, r2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <vPortFree+0x44>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	60fb      	str	r3, [r7, #12]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <vPortFree+0x62>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	60bb      	str	r3, [r7, #8]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	4b11      	ldr	r3, [pc, #68]	; (80056cc <vPortFree+0xac>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d019      	beq.n	80056c4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d115      	bne.n	80056c4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <vPortFree+0xac>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	43db      	mvns	r3, r3
 80056a2:	401a      	ands	r2, r3
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056a8:	f7fe feba 	bl	8004420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <vPortFree+0xb0>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	4a06      	ldr	r2, [pc, #24]	; (80056d0 <vPortFree+0xb0>)
 80056b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056ba:	6938      	ldr	r0, [r7, #16]
 80056bc:	f000 f86c 	bl	8005798 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056c0:	f7fe febc 	bl	800443c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056c4:	bf00      	nop
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20000fc8 	.word	0x20000fc8
 80056d0:	20000fc0 	.word	0x20000fc0

080056d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056e0:	4b27      	ldr	r3, [pc, #156]	; (8005780 <prvHeapInit+0xac>)
 80056e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00c      	beq.n	8005708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3307      	adds	r3, #7
 80056f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0307 	bic.w	r3, r3, #7
 80056fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <prvHeapInit+0xac>)
 8005704:	4413      	add	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800570c:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <prvHeapInit+0xb0>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005712:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <prvHeapInit+0xb0>)
 8005714:	2200      	movs	r2, #0
 8005716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	4413      	add	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005720:	2208      	movs	r2, #8
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1a9b      	subs	r3, r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a15      	ldr	r2, [pc, #84]	; (8005788 <prvHeapInit+0xb4>)
 8005734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005736:	4b14      	ldr	r3, [pc, #80]	; (8005788 <prvHeapInit+0xb4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2200      	movs	r2, #0
 800573c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800573e:	4b12      	ldr	r3, [pc, #72]	; (8005788 <prvHeapInit+0xb4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	1ad2      	subs	r2, r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <prvHeapInit+0xb4>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	4a0a      	ldr	r2, [pc, #40]	; (800578c <prvHeapInit+0xb8>)
 8005762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a09      	ldr	r2, [pc, #36]	; (8005790 <prvHeapInit+0xbc>)
 800576a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800576c:	4b09      	ldr	r3, [pc, #36]	; (8005794 <prvHeapInit+0xc0>)
 800576e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005772:	601a      	str	r2, [r3, #0]
}
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	200003b4 	.word	0x200003b4
 8005784:	20000fb4 	.word	0x20000fb4
 8005788:	20000fbc 	.word	0x20000fbc
 800578c:	20000fc4 	.word	0x20000fc4
 8005790:	20000fc0 	.word	0x20000fc0
 8005794:	20000fc8 	.word	0x20000fc8

08005798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057a0:	4b28      	ldr	r3, [pc, #160]	; (8005844 <prvInsertBlockIntoFreeList+0xac>)
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	e002      	b.n	80057ac <prvInsertBlockIntoFreeList+0x14>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d8f7      	bhi.n	80057a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4413      	add	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d108      	bne.n	80057da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	441a      	add	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d118      	bne.n	8005820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b15      	ldr	r3, [pc, #84]	; (8005848 <prvInsertBlockIntoFreeList+0xb0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d00d      	beq.n	8005816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	441a      	add	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	e008      	b.n	8005828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005816:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <prvInsertBlockIntoFreeList+0xb0>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e003      	b.n	8005828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d002      	beq.n	8005836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20000fb4 	.word	0x20000fb4
 8005848:	20000fbc 	.word	0x20000fbc

0800584c <__libc_init_array>:
 800584c:	b570      	push	{r4, r5, r6, lr}
 800584e:	4d0d      	ldr	r5, [pc, #52]	; (8005884 <__libc_init_array+0x38>)
 8005850:	4c0d      	ldr	r4, [pc, #52]	; (8005888 <__libc_init_array+0x3c>)
 8005852:	1b64      	subs	r4, r4, r5
 8005854:	10a4      	asrs	r4, r4, #2
 8005856:	2600      	movs	r6, #0
 8005858:	42a6      	cmp	r6, r4
 800585a:	d109      	bne.n	8005870 <__libc_init_array+0x24>
 800585c:	4d0b      	ldr	r5, [pc, #44]	; (800588c <__libc_init_array+0x40>)
 800585e:	4c0c      	ldr	r4, [pc, #48]	; (8005890 <__libc_init_array+0x44>)
 8005860:	f000 f82e 	bl	80058c0 <_init>
 8005864:	1b64      	subs	r4, r4, r5
 8005866:	10a4      	asrs	r4, r4, #2
 8005868:	2600      	movs	r6, #0
 800586a:	42a6      	cmp	r6, r4
 800586c:	d105      	bne.n	800587a <__libc_init_array+0x2e>
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	f855 3b04 	ldr.w	r3, [r5], #4
 8005874:	4798      	blx	r3
 8005876:	3601      	adds	r6, #1
 8005878:	e7ee      	b.n	8005858 <__libc_init_array+0xc>
 800587a:	f855 3b04 	ldr.w	r3, [r5], #4
 800587e:	4798      	blx	r3
 8005880:	3601      	adds	r6, #1
 8005882:	e7f2      	b.n	800586a <__libc_init_array+0x1e>
 8005884:	08005940 	.word	0x08005940
 8005888:	08005940 	.word	0x08005940
 800588c:	08005940 	.word	0x08005940
 8005890:	08005944 	.word	0x08005944

08005894 <memcpy>:
 8005894:	440a      	add	r2, r1
 8005896:	4291      	cmp	r1, r2
 8005898:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800589c:	d100      	bne.n	80058a0 <memcpy+0xc>
 800589e:	4770      	bx	lr
 80058a0:	b510      	push	{r4, lr}
 80058a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058aa:	4291      	cmp	r1, r2
 80058ac:	d1f9      	bne.n	80058a2 <memcpy+0xe>
 80058ae:	bd10      	pop	{r4, pc}

080058b0 <memset>:
 80058b0:	4402      	add	r2, r0
 80058b2:	4603      	mov	r3, r0
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d100      	bne.n	80058ba <memset+0xa>
 80058b8:	4770      	bx	lr
 80058ba:	f803 1b01 	strb.w	r1, [r3], #1
 80058be:	e7f9      	b.n	80058b4 <memset+0x4>

080058c0 <_init>:
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	bf00      	nop
 80058c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c6:	bc08      	pop	{r3}
 80058c8:	469e      	mov	lr, r3
 80058ca:	4770      	bx	lr

080058cc <_fini>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	bf00      	nop
 80058d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d2:	bc08      	pop	{r3}
 80058d4:	469e      	mov	lr, r3
 80058d6:	4770      	bx	lr
